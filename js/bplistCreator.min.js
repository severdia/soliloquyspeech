function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire3682"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire3682"] = parcelRequire;
}
parcelRequire.register("6sp4e", function(module, exports) {
module.exports = {
    DEFAULT_INITIAL_SIZE: 8192,
    DEFAULT_INCREMENT_AMOUNT: 8192,
    DEFAULT_FREQUENCY: 1,
    DEFAULT_CHUNK_SIZE: 1024
};

});

parcelRequire.register("3nZwL", function(module, exports) {

var $27733f2cda54ecb1$require$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;

var $cfMXC = parcelRequire("cfMXC");

var $6sp4e = parcelRequire("6sp4e");

var $e4AID = parcelRequire("e4AID");
var $27733f2cda54ecb1$var$ReadableStreamBuffer = module.exports = function(opts) {
    var that = this;
    $cfMXC.Stream.call(this);
    opts = opts || {
    };
    var frequency = opts.hasOwnProperty("frequency") ? opts.frequency : $6sp4e.DEFAULT_FREQUENCY;
    var chunkSize = opts.chunkSize || $6sp4e.DEFAULT_CHUNK_SIZE;
    var initialSize = opts.initialSize || $6sp4e.DEFAULT_INITIAL_SIZE;
    var incrementAmount = opts.incrementAmount || $6sp4e.DEFAULT_INCREMENT_AMOUNT;
    var size = 0;
    var buffer = new $27733f2cda54ecb1$require$Buffer(initialSize);
    var encoding1 = null;
    this.readable = true;
    this.writable = false;
    var sendData = function() {
        var amount = Math.min(chunkSize, size);
        if (amount > 0) {
            var chunk = null;
            if (encoding1) chunk = buffer.toString(encoding1, 0, amount);
            else {
                chunk = new $27733f2cda54ecb1$require$Buffer(amount);
                buffer.copy(chunk, 0, 0, amount);
            }
            that.emit("data", chunk);
            if (amount < buffer.length) buffer.copy(buffer, 0, amount, size);
            size -= amount;
        }
        if (size === 0 && !that.readable) {
            that.emit("end");
            that.emit("close");
            if (sendData && sendData.interval) {
                clearInterval(sendData.interval);
                sendData.interval = null;
            }
        }
    };
    this.size = function() {
        return size;
    };
    this.maxSize = function() {
        return buffer.length;
    };
    var increaseBufferIfNecessary = function(incomingDataSize) {
        if (buffer.length - size < incomingDataSize) {
            var factor = Math.ceil((incomingDataSize - (buffer.length - size)) / incrementAmount);
            var newBuffer = new $27733f2cda54ecb1$require$Buffer(buffer.length + incrementAmount * factor);
            buffer.copy(newBuffer, 0, 0, size);
            buffer = newBuffer;
        }
    };
    this.put = function(data, encoding) {
        if (!that.readable) return;
        var wasEmpty = size === 0;
        if ($27733f2cda54ecb1$require$Buffer.isBuffer(data)) {
            increaseBufferIfNecessary(data.length);
            data.copy(buffer, size, 0);
            size += data.length;
        } else {
            data = data + "";
            var dataSizeInBytes = $27733f2cda54ecb1$require$Buffer.byteLength(data);
            increaseBufferIfNecessary(dataSizeInBytes);
            buffer.write(data, size, encoding || "utf8");
            size += dataSizeInBytes;
        }
        if (wasEmpty && size > 0) this.emit('readable');
        if (!this.isPaused && !frequency) while(size > 0)sendData();
    };
    this.pause = function() {
        this.isPaused = true;
        if (sendData && sendData.interval) {
            clearInterval(sendData.interval);
            delete sendData.interval;
        }
    };
    this.resume = function() {
        this.isPaused = false;
        if (sendData && !sendData.interval && frequency > 0) sendData.interval = setInterval(sendData, frequency);
    };
    this.destroy = function() {
        that.emit("end");
        if (sendData.interval) clearInterval(sendData.interval);
        sendData = null;
        that.readable = false;
        that.emit("close");
    };
    this.destroySoon = function() {
        that.readable = false;
        if (!sendData.interval) {
            that.emit("end");
            that.emit("close");
        }
    };
    this.setEncoding = function(_encoding) {
        encoding1 = _encoding;
    };
    this.resume();
};
$e4AID.inherits($27733f2cda54ecb1$var$ReadableStreamBuffer, $cfMXC.Stream);

});
var $7aaf889172aa0226$exports = {};

$parcel$export($7aaf889172aa0226$exports, "Buffer", () => $7aaf889172aa0226$export$a143d493d941bafc, (v) => $7aaf889172aa0226$export$a143d493d941bafc = v);
$parcel$export($7aaf889172aa0226$exports, "SlowBuffer", () => $7aaf889172aa0226$export$e4cf37d7f6fb9e0a, (v) => $7aaf889172aa0226$export$e4cf37d7f6fb9e0a = v);
$parcel$export($7aaf889172aa0226$exports, "INSPECT_MAX_BYTES", () => $7aaf889172aa0226$export$f99ded8fe4b79145, (v) => $7aaf889172aa0226$export$f99ded8fe4b79145 = v);
$parcel$export($7aaf889172aa0226$exports, "kMaxLength", () => $7aaf889172aa0226$export$599f31c3813fae4d, (v) => $7aaf889172aa0226$export$599f31c3813fae4d = v);
var $7aaf889172aa0226$export$a143d493d941bafc;
var $7aaf889172aa0226$export$e4cf37d7f6fb9e0a;
var $7aaf889172aa0226$export$f99ded8fe4b79145;
var $7aaf889172aa0226$export$599f31c3813fae4d;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var $023dfcfbcb75732a$export$a48f0734ac7c2329;
var $023dfcfbcb75732a$export$d622b2ad8d90c771;
var $023dfcfbcb75732a$export$6100ba28696e12de;
'use strict';
$023dfcfbcb75732a$export$a48f0734ac7c2329 = $023dfcfbcb75732a$var$byteLength;
$023dfcfbcb75732a$export$d622b2ad8d90c771 = $023dfcfbcb75732a$var$toByteArray;
$023dfcfbcb75732a$export$6100ba28696e12de = $023dfcfbcb75732a$var$fromByteArray;
var $023dfcfbcb75732a$var$lookup = [];
var $023dfcfbcb75732a$var$revLookup = [];
var $023dfcfbcb75732a$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var $023dfcfbcb75732a$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var $023dfcfbcb75732a$var$i = 0, $023dfcfbcb75732a$var$len = $023dfcfbcb75732a$var$code.length; $023dfcfbcb75732a$var$i < $023dfcfbcb75732a$var$len; ++$023dfcfbcb75732a$var$i){
    $023dfcfbcb75732a$var$lookup[$023dfcfbcb75732a$var$i] = $023dfcfbcb75732a$var$code[$023dfcfbcb75732a$var$i];
    $023dfcfbcb75732a$var$revLookup[$023dfcfbcb75732a$var$code.charCodeAt($023dfcfbcb75732a$var$i)] = $023dfcfbcb75732a$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$023dfcfbcb75732a$var$revLookup['-'.charCodeAt(0)] = 62;
$023dfcfbcb75732a$var$revLookup['_'.charCodeAt(0)] = 63;
function $023dfcfbcb75732a$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $023dfcfbcb75732a$var$byteLength(b64) {
    var lens = $023dfcfbcb75732a$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $023dfcfbcb75732a$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $023dfcfbcb75732a$var$toByteArray(b64) {
    var tmp;
    var lens = $023dfcfbcb75732a$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $023dfcfbcb75732a$var$Arr($023dfcfbcb75732a$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 18 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 2 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i)] << 10 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $023dfcfbcb75732a$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function $023dfcfbcb75732a$var$tripletToBase64(num) {
    return $023dfcfbcb75732a$var$lookup[num >> 18 & 63] + $023dfcfbcb75732a$var$lookup[num >> 12 & 63] + $023dfcfbcb75732a$var$lookup[num >> 6 & 63] + $023dfcfbcb75732a$var$lookup[num & 63];
}
function $023dfcfbcb75732a$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
        output.push($023dfcfbcb75732a$var$tripletToBase64(tmp));
    }
    return output.join('');
}
function $023dfcfbcb75732a$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($023dfcfbcb75732a$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($023dfcfbcb75732a$var$lookup[tmp >> 2] + $023dfcfbcb75732a$var$lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($023dfcfbcb75732a$var$lookup[tmp >> 10] + $023dfcfbcb75732a$var$lookup[tmp >> 4 & 63] + $023dfcfbcb75732a$var$lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $b38ea80d59ab0cdb$export$aafa59e2e03f2942;
var $b38ea80d59ab0cdb$export$68d8715fc104d294;
$b38ea80d59ab0cdb$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$b38ea80d59ab0cdb$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};


var $7aaf889172aa0226$var$customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
$7aaf889172aa0226$export$a143d493d941bafc = $7aaf889172aa0226$var$Buffer;
$7aaf889172aa0226$export$e4cf37d7f6fb9e0a = $7aaf889172aa0226$var$SlowBuffer;
$7aaf889172aa0226$export$f99ded8fe4b79145 = 50;
var $7aaf889172aa0226$var$K_MAX_LENGTH = 2147483647;
$7aaf889172aa0226$export$599f31c3813fae4d = $7aaf889172aa0226$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $7aaf889172aa0226$var$Buffer.TYPED_ARRAY_SUPPORT = $7aaf889172aa0226$var$typedArraySupport();
if (!$7aaf889172aa0226$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $7aaf889172aa0226$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($7aaf889172aa0226$var$Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!$7aaf889172aa0226$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($7aaf889172aa0226$var$Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!$7aaf889172aa0226$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $7aaf889172aa0226$var$createBuffer(length) {
    if (length > $7aaf889172aa0226$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $7aaf889172aa0226$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $7aaf889172aa0226$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return $7aaf889172aa0226$var$allocUnsafe(arg);
    }
    return $7aaf889172aa0226$var$from(arg, encodingOrOffset, length);
}
$7aaf889172aa0226$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $7aaf889172aa0226$var$from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return $7aaf889172aa0226$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $7aaf889172aa0226$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($7aaf889172aa0226$var$isInstance(value, ArrayBuffer) || value && $7aaf889172aa0226$var$isInstance(value.buffer, ArrayBuffer)) return $7aaf889172aa0226$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && ($7aaf889172aa0226$var$isInstance(value, SharedArrayBuffer) || value && $7aaf889172aa0226$var$isInstance(value.buffer, SharedArrayBuffer))) return $7aaf889172aa0226$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $7aaf889172aa0226$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $7aaf889172aa0226$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return $7aaf889172aa0226$var$Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $7aaf889172aa0226$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $7aaf889172aa0226$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($7aaf889172aa0226$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($7aaf889172aa0226$var$Buffer, Uint8Array);
function $7aaf889172aa0226$var$assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $7aaf889172aa0226$var$alloc(size, fill, encoding) {
    $7aaf889172aa0226$var$assertSize(size);
    if (size <= 0) return $7aaf889172aa0226$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? $7aaf889172aa0226$var$createBuffer(size).fill(fill, encoding) : $7aaf889172aa0226$var$createBuffer(size).fill(fill);
    return $7aaf889172aa0226$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $7aaf889172aa0226$var$Buffer.alloc = function(size, fill, encoding) {
    return $7aaf889172aa0226$var$alloc(size, fill, encoding);
};
function $7aaf889172aa0226$var$allocUnsafe(size) {
    $7aaf889172aa0226$var$assertSize(size);
    return $7aaf889172aa0226$var$createBuffer(size < 0 ? 0 : $7aaf889172aa0226$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $7aaf889172aa0226$var$Buffer.allocUnsafe = function(size) {
    return $7aaf889172aa0226$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $7aaf889172aa0226$var$Buffer.allocUnsafeSlow = function(size) {
    return $7aaf889172aa0226$var$allocUnsafe(size);
};
function $7aaf889172aa0226$var$fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!$7aaf889172aa0226$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = $7aaf889172aa0226$var$byteLength(string, encoding) | 0;
    var buf = $7aaf889172aa0226$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $7aaf889172aa0226$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $7aaf889172aa0226$var$checked(array.length) | 0;
    var buf = $7aaf889172aa0226$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $7aaf889172aa0226$var$fromArrayView(arrayView) {
    if ($7aaf889172aa0226$var$isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return $7aaf889172aa0226$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $7aaf889172aa0226$var$fromArrayLike(arrayView);
}
function $7aaf889172aa0226$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $7aaf889172aa0226$var$Buffer.prototype);
    return buf;
}
function $7aaf889172aa0226$var$fromObject(obj) {
    if ($7aaf889172aa0226$var$Buffer.isBuffer(obj)) {
        var len = $7aaf889172aa0226$var$checked(obj.length) | 0;
        var buf = $7aaf889172aa0226$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || $7aaf889172aa0226$var$numberIsNaN(obj.length)) return $7aaf889172aa0226$var$createBuffer(0);
        return $7aaf889172aa0226$var$fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return $7aaf889172aa0226$var$fromArrayLike(obj.data);
}
function $7aaf889172aa0226$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $7aaf889172aa0226$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $7aaf889172aa0226$var$K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function $7aaf889172aa0226$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $7aaf889172aa0226$var$Buffer.alloc(+length);
}
$7aaf889172aa0226$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $7aaf889172aa0226$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$7aaf889172aa0226$var$Buffer.compare = function compare(a, b) {
    if ($7aaf889172aa0226$var$isInstance(a, Uint8Array)) a = $7aaf889172aa0226$var$Buffer.from(a, a.offset, a.byteLength);
    if ($7aaf889172aa0226$var$isInstance(b, Uint8Array)) b = $7aaf889172aa0226$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(a) || !$7aaf889172aa0226$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$7aaf889172aa0226$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
$7aaf889172aa0226$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $7aaf889172aa0226$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $7aaf889172aa0226$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($7aaf889172aa0226$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) $7aaf889172aa0226$var$Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $7aaf889172aa0226$var$byteLength(string, encoding) {
    if ($7aaf889172aa0226$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $7aaf889172aa0226$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return $7aaf889172aa0226$var$utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return $7aaf889172aa0226$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $7aaf889172aa0226$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
$7aaf889172aa0226$var$Buffer.byteLength = $7aaf889172aa0226$var$byteLength;
function $7aaf889172aa0226$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return $7aaf889172aa0226$var$hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return $7aaf889172aa0226$var$utf8Slice(this, start, end);
        case 'ascii':
            return $7aaf889172aa0226$var$asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return $7aaf889172aa0226$var$latin1Slice(this, start, end);
        case 'base64':
            return $7aaf889172aa0226$var$base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $7aaf889172aa0226$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$7aaf889172aa0226$var$Buffer.prototype._isBuffer = true;
function $7aaf889172aa0226$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$7aaf889172aa0226$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)$7aaf889172aa0226$var$swap(this, i, i + 1);
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        $7aaf889172aa0226$var$swap(this, i, i + 3);
        $7aaf889172aa0226$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        $7aaf889172aa0226$var$swap(this, i, i + 7);
        $7aaf889172aa0226$var$swap(this, i + 1, i + 6);
        $7aaf889172aa0226$var$swap(this, i + 2, i + 5);
        $7aaf889172aa0226$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$7aaf889172aa0226$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return $7aaf889172aa0226$var$utf8Slice(this, 0, length);
    return $7aaf889172aa0226$var$slowToString.apply(this, arguments);
};
$7aaf889172aa0226$var$Buffer.prototype.toLocaleString = $7aaf889172aa0226$var$Buffer.prototype.toString;
$7aaf889172aa0226$var$Buffer.prototype.equals = function equals(b) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return $7aaf889172aa0226$var$Buffer.compare(this, b) === 0;
};
$7aaf889172aa0226$var$Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = $7aaf889172aa0226$export$f99ded8fe4b79145;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if ($7aaf889172aa0226$var$customInspectSymbol) $7aaf889172aa0226$var$Buffer.prototype[$7aaf889172aa0226$var$customInspectSymbol] = $7aaf889172aa0226$var$Buffer.prototype.inspect;
$7aaf889172aa0226$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($7aaf889172aa0226$var$isInstance(target, Uint8Array)) target = $7aaf889172aa0226$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $7aaf889172aa0226$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($7aaf889172aa0226$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = $7aaf889172aa0226$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($7aaf889172aa0226$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $7aaf889172aa0226$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $7aaf889172aa0226$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function $7aaf889172aa0226$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
$7aaf889172aa0226$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$7aaf889172aa0226$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $7aaf889172aa0226$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$7aaf889172aa0226$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $7aaf889172aa0226$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $7aaf889172aa0226$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($7aaf889172aa0226$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $7aaf889172aa0226$var$utf8Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $7aaf889172aa0226$var$asciiWrite(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$asciiToBytes(string), buf, offset, length);
}
function $7aaf889172aa0226$var$base64Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$base64ToBytes(string), buf, offset, length);
}
function $7aaf889172aa0226$var$ucs2Write(buf, string, offset, length) {
    return $7aaf889172aa0226$var$blitBuffer($7aaf889172aa0226$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$7aaf889172aa0226$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return $7aaf889172aa0226$var$hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return $7aaf889172aa0226$var$utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return $7aaf889172aa0226$var$asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return $7aaf889172aa0226$var$base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $7aaf889172aa0226$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
$7aaf889172aa0226$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $7aaf889172aa0226$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $023dfcfbcb75732a$export$6100ba28696e12de(buf);
    else return $023dfcfbcb75732a$export$6100ba28696e12de(buf.slice(start, end));
}
function $7aaf889172aa0226$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $7aaf889172aa0226$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH = 4096;
function $7aaf889172aa0226$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $7aaf889172aa0226$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $7aaf889172aa0226$var$asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function $7aaf889172aa0226$var$latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $7aaf889172aa0226$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += $7aaf889172aa0226$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $7aaf889172aa0226$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$7aaf889172aa0226$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $7aaf889172aa0226$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $7aaf889172aa0226$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
$7aaf889172aa0226$var$Buffer.prototype.readUintLE = $7aaf889172aa0226$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readUintBE = $7aaf889172aa0226$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 256))val += this[offset + --byteLength] * mul;
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint8 = $7aaf889172aa0226$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$7aaf889172aa0226$var$Buffer.prototype.readUint16LE = $7aaf889172aa0226$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint16BE = $7aaf889172aa0226$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$7aaf889172aa0226$var$Buffer.prototype.readUint32LE = $7aaf889172aa0226$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
$7aaf889172aa0226$var$Buffer.prototype.readUint32BE = $7aaf889172aa0226$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$7aaf889172aa0226$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$7aaf889172aa0226$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$7aaf889172aa0226$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, true, 23, 4);
};
$7aaf889172aa0226$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 4, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, false, 23, 4);
};
$7aaf889172aa0226$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 8, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, true, 52, 8);
};
$7aaf889172aa0226$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkOffset(offset, 8, this.length);
    return $b38ea80d59ab0cdb$export$aafa59e2e03f2942(this, offset, false, 52, 8);
};
function $7aaf889172aa0226$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
$7aaf889172aa0226$var$Buffer.prototype.writeUintLE = $7aaf889172aa0226$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUintBE = $7aaf889172aa0226$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint8 = $7aaf889172aa0226$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint16LE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint16BE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint32LE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeUint32BE = $7aaf889172aa0226$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $7aaf889172aa0226$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$7aaf889172aa0226$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function $7aaf889172aa0226$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    $b38ea80d59ab0cdb$export$68d8715fc104d294(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$7aaf889172aa0226$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeFloat(this, value, offset, true, noAssert);
};
$7aaf889172aa0226$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeFloat(this, value, offset, false, noAssert);
};
function $7aaf889172aa0226$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $7aaf889172aa0226$var$checkIEEE754(buf, value, offset
    $b38ea80d59ab0cdb$export$68d8715fc104d294(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$7aaf889172aa0226$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeDouble(this, value, offset, true, noAssert);
};
$7aaf889172aa0226$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $7aaf889172aa0226$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$7aaf889172aa0226$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$7aaf889172aa0226$var$Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$7aaf889172aa0226$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !$7aaf889172aa0226$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $7aaf889172aa0226$var$Buffer.isBuffer(val) ? val : $7aaf889172aa0226$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $7aaf889172aa0226$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $7aaf889172aa0226$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($7aaf889172aa0226$var$INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function $7aaf889172aa0226$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function $7aaf889172aa0226$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function $7aaf889172aa0226$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $7aaf889172aa0226$var$base64ToBytes(str) {
    return $023dfcfbcb75732a$export$d622b2ad8d90c771($7aaf889172aa0226$var$base64clean(str));
}
function $7aaf889172aa0226$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $7aaf889172aa0226$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $7aaf889172aa0226$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $7aaf889172aa0226$var$hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

parcelRequire.register("cfMXC", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = $8ebcdd4834616722$var$Stream;

var $2fbJO = parcelRequire("2fbJO");
var $8ebcdd4834616722$require$EE = $2fbJO.EventEmitter;

var $bGPXt = parcelRequire("bGPXt");
$bGPXt($8ebcdd4834616722$var$Stream, $8ebcdd4834616722$require$EE);

$8ebcdd4834616722$var$Stream.Readable = (parcelRequire("nS5tr"));

$8ebcdd4834616722$var$Stream.Writable = (parcelRequire("fyohC"));

$8ebcdd4834616722$var$Stream.Duplex = (parcelRequire("9NHYD"));

$8ebcdd4834616722$var$Stream.Transform = (parcelRequire("aQy8i"));

$8ebcdd4834616722$var$Stream.PassThrough = (parcelRequire("hFiQr"));

$8ebcdd4834616722$var$Stream.finished = (parcelRequire("iDiJV"));

$8ebcdd4834616722$var$Stream.pipeline = (parcelRequire("hCdMG"));
// Backwards-compat with node 0.4.x
$8ebcdd4834616722$var$Stream.Stream = $8ebcdd4834616722$var$Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function $8ebcdd4834616722$var$Stream() {
    $8ebcdd4834616722$require$EE.call(this);
}
$8ebcdd4834616722$var$Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on('data', ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on('drain', ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if ($8ebcdd4834616722$require$EE.listenerCount(this, 'error') === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on('error', onerror);
    dest.on('error', onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
    }
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

});
parcelRequire.register("2fbJO", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var $1a261667fe0583e9$var$R = typeof Reflect === 'object' ? Reflect : null;
var $1a261667fe0583e9$var$ReflectApply = $1a261667fe0583e9$var$R && typeof $1a261667fe0583e9$var$R.apply === 'function' ? $1a261667fe0583e9$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $1a261667fe0583e9$var$ReflectOwnKeys;
if ($1a261667fe0583e9$var$R && typeof $1a261667fe0583e9$var$R.ownKeys === 'function') $1a261667fe0583e9$var$ReflectOwnKeys = $1a261667fe0583e9$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $1a261667fe0583e9$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $1a261667fe0583e9$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $1a261667fe0583e9$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $1a261667fe0583e9$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $1a261667fe0583e9$var$EventEmitter() {
    $1a261667fe0583e9$var$EventEmitter.init.call(this);
}
module.exports = $1a261667fe0583e9$var$EventEmitter;
module.exports.once = $1a261667fe0583e9$var$once;
// Backwards-compat with node 0.10.x
$1a261667fe0583e9$var$EventEmitter.EventEmitter = $1a261667fe0583e9$var$EventEmitter;
$1a261667fe0583e9$var$EventEmitter.prototype._events = undefined;
$1a261667fe0583e9$var$EventEmitter.prototype._eventsCount = 0;
$1a261667fe0583e9$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $1a261667fe0583e9$var$defaultMaxListeners = 10;
function $1a261667fe0583e9$var$checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty($1a261667fe0583e9$var$EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return $1a261667fe0583e9$var$defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || $1a261667fe0583e9$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        $1a261667fe0583e9$var$defaultMaxListeners = arg;
    }
});
$1a261667fe0583e9$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$1a261667fe0583e9$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || $1a261667fe0583e9$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function $1a261667fe0583e9$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $1a261667fe0583e9$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$1a261667fe0583e9$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $1a261667fe0583e9$var$_getMaxListeners(this);
};
$1a261667fe0583e9$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') $1a261667fe0583e9$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $1a261667fe0583e9$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$1a261667fe0583e9$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $1a261667fe0583e9$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $1a261667fe0583e9$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $1a261667fe0583e9$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $1a261667fe0583e9$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$1a261667fe0583e9$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $1a261667fe0583e9$var$_addListener(this, type, listener, false);
};
$1a261667fe0583e9$var$EventEmitter.prototype.on = $1a261667fe0583e9$var$EventEmitter.prototype.addListener;
$1a261667fe0583e9$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $1a261667fe0583e9$var$_addListener(this, type, listener, true);
};
function $1a261667fe0583e9$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $1a261667fe0583e9$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $1a261667fe0583e9$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$1a261667fe0583e9$var$EventEmitter.prototype.once = function once(type, listener) {
    $1a261667fe0583e9$var$checkListener(listener);
    this.on(type, $1a261667fe0583e9$var$_onceWrap(this, type, listener));
    return this;
};
$1a261667fe0583e9$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $1a261667fe0583e9$var$checkListener(listener);
    this.prependListener(type, $1a261667fe0583e9$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$1a261667fe0583e9$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $1a261667fe0583e9$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $1a261667fe0583e9$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
$1a261667fe0583e9$var$EventEmitter.prototype.off = $1a261667fe0583e9$var$EventEmitter.prototype.removeListener;
$1a261667fe0583e9$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $1a261667fe0583e9$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $1a261667fe0583e9$var$unwrapListeners(evlistener) : $1a261667fe0583e9$var$arrayClone(evlistener, evlistener.length);
}
$1a261667fe0583e9$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $1a261667fe0583e9$var$_listeners(this, type, true);
};
$1a261667fe0583e9$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $1a261667fe0583e9$var$_listeners(this, type, false);
};
$1a261667fe0583e9$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return $1a261667fe0583e9$var$listenerCount.call(emitter, type);
};
$1a261667fe0583e9$var$EventEmitter.prototype.listenerCount = $1a261667fe0583e9$var$listenerCount;
function $1a261667fe0583e9$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$1a261667fe0583e9$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $1a261667fe0583e9$var$ReflectOwnKeys(this._events) : [];
};
function $1a261667fe0583e9$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $1a261667fe0583e9$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $1a261667fe0583e9$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $1a261667fe0583e9$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        $1a261667fe0583e9$var$eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') $1a261667fe0583e9$var$addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function $1a261667fe0583e9$var$addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') $1a261667fe0583e9$var$eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function $1a261667fe0583e9$var$eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

});

parcelRequire.register("bGPXt", function(module, exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRequire.register("nS5tr", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $4DZrq = parcelRequire("4DZrq");
module.exports = $047c1ab4bb23a40d$var$Readable;
/*<replacement>*/ var $047c1ab4bb23a40d$var$Duplex;
/*</replacement>*/ $047c1ab4bb23a40d$var$Readable.ReadableState = $047c1ab4bb23a40d$var$ReadableState;

var $2fbJO = parcelRequire("2fbJO");
var $047c1ab4bb23a40d$require$EE = $2fbJO.EventEmitter;
var $047c1ab4bb23a40d$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $a8ySM = parcelRequire("a8ySM");

var $047c1ab4bb23a40d$require$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;
var $047c1ab4bb23a40d$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $047c1ab4bb23a40d$var$_uint8ArrayToBuffer(chunk) {
    return $047c1ab4bb23a40d$require$Buffer.from(chunk);
}
function $047c1ab4bb23a40d$var$_isUint8Array(obj) {
    return $047c1ab4bb23a40d$require$Buffer.isBuffer(obj) || obj instanceof $047c1ab4bb23a40d$var$OurUint8Array;
}

var $XDU19 = parcelRequire("XDU19");
var $047c1ab4bb23a40d$var$debug;
if ($XDU19 && $XDU19.debuglog) $047c1ab4bb23a40d$var$debug = $XDU19.debuglog('stream');
else $047c1ab4bb23a40d$var$debug = function debug() {
};

var $hMFMp = parcelRequire("hMFMp");

var $hziyW = parcelRequire("hziyW");

var $crhoq = parcelRequire("crhoq");
var $047c1ab4bb23a40d$var$getHighWaterMark = $crhoq.getHighWaterMark;

var $ju46Y = parcelRequire("ju46Y");
var $047c1ab4bb23a40d$require$_require$codes = $ju46Y.codes;
var $047c1ab4bb23a40d$var$ERR_INVALID_ARG_TYPE = $047c1ab4bb23a40d$require$_require$codes.ERR_INVALID_ARG_TYPE, $047c1ab4bb23a40d$var$ERR_STREAM_PUSH_AFTER_EOF = $047c1ab4bb23a40d$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $047c1ab4bb23a40d$var$ERR_METHOD_NOT_IMPLEMENTED = $047c1ab4bb23a40d$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $047c1ab4bb23a40d$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $047c1ab4bb23a40d$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $047c1ab4bb23a40d$var$StringDecoder;
var $047c1ab4bb23a40d$var$createReadableStreamAsyncIterator;
var $047c1ab4bb23a40d$var$from;

(parcelRequire("bGPXt"))($047c1ab4bb23a40d$var$Readable, $a8ySM);
var $047c1ab4bb23a40d$var$errorOrDestroy = $hziyW.errorOrDestroy;
var $047c1ab4bb23a40d$var$kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function $047c1ab4bb23a40d$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $047c1ab4bb23a40d$var$ReadableState(options, stream, isDuplex) {
    $047c1ab4bb23a40d$var$Duplex = $047c1ab4bb23a40d$var$Duplex || (parcelRequire("9NHYD"));
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $047c1ab4bb23a40d$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $047c1ab4bb23a40d$var$getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $hMFMp();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$047c1ab4bb23a40d$var$StringDecoder) $047c1ab4bb23a40d$var$StringDecoder = (parcelRequire("2ebqm")).StringDecoder;
        this.decoder = new $047c1ab4bb23a40d$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $047c1ab4bb23a40d$var$Readable(options) {
    $047c1ab4bb23a40d$var$Duplex = $047c1ab4bb23a40d$var$Duplex || (parcelRequire("9NHYD"));
    if (!(this instanceof $047c1ab4bb23a40d$var$Readable)) return new $047c1ab4bb23a40d$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $047c1ab4bb23a40d$var$Duplex;
    this._readableState = new $047c1ab4bb23a40d$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    $a8ySM.call(this);
}
Object.defineProperty($047c1ab4bb23a40d$var$Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$047c1ab4bb23a40d$var$Readable.prototype.destroy = $hziyW.destroy;
$047c1ab4bb23a40d$var$Readable.prototype._undestroy = $hziyW.undestroy;
$047c1ab4bb23a40d$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$047c1ab4bb23a40d$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $047c1ab4bb23a40d$require$Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $047c1ab4bb23a40d$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$047c1ab4bb23a40d$var$Readable.prototype.unshift = function(chunk) {
    return $047c1ab4bb23a40d$var$readableAddChunk(this, chunk, null, true, false);
};
function $047c1ab4bb23a40d$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $047c1ab4bb23a40d$var$debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $047c1ab4bb23a40d$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $047c1ab4bb23a40d$var$chunkInvalid(state, chunk);
        if (er) $047c1ab4bb23a40d$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== $047c1ab4bb23a40d$require$Buffer.prototype) chunk = $047c1ab4bb23a40d$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $047c1ab4bb23a40d$var$errorOrDestroy(stream, new $047c1ab4bb23a40d$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $047c1ab4bb23a40d$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $047c1ab4bb23a40d$var$errorOrDestroy(stream, new $047c1ab4bb23a40d$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $047c1ab4bb23a40d$var$addChunk(stream, state, chunk, false);
                    else $047c1ab4bb23a40d$var$maybeReadMore(stream, state);
                } else $047c1ab4bb23a40d$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $047c1ab4bb23a40d$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $047c1ab4bb23a40d$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $047c1ab4bb23a40d$var$emitReadable(stream);
    }
    $047c1ab4bb23a40d$var$maybeReadMore(stream, state);
}
function $047c1ab4bb23a40d$var$chunkInvalid(state, chunk) {
    var er;
    if (!$047c1ab4bb23a40d$var$_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new $047c1ab4bb23a40d$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
$047c1ab4bb23a40d$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$047c1ab4bb23a40d$var$Readable.prototype.setEncoding = function(enc) {
    if (!$047c1ab4bb23a40d$var$StringDecoder) $047c1ab4bb23a40d$var$StringDecoder = (parcelRequire("2ebqm")).StringDecoder;
    var decoder = new $047c1ab4bb23a40d$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $047c1ab4bb23a40d$var$MAX_HWM = 1073741824;
function $047c1ab4bb23a40d$var$computeNewHighWaterMark(n) {
    if (n >= $047c1ab4bb23a40d$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $047c1ab4bb23a40d$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $047c1ab4bb23a40d$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $047c1ab4bb23a40d$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$047c1ab4bb23a40d$var$Readable.prototype.read = function(n) {
    $047c1ab4bb23a40d$var$debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $047c1ab4bb23a40d$var$debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) $047c1ab4bb23a40d$var$endReadable(this);
        else $047c1ab4bb23a40d$var$emitReadable(this);
        return null;
    }
    n = $047c1ab4bb23a40d$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $047c1ab4bb23a40d$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $047c1ab4bb23a40d$var$debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $047c1ab4bb23a40d$var$debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $047c1ab4bb23a40d$var$debug('reading or ended', doRead);
    } else if (doRead) {
        $047c1ab4bb23a40d$var$debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $047c1ab4bb23a40d$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $047c1ab4bb23a40d$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $047c1ab4bb23a40d$var$endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function $047c1ab4bb23a40d$var$onEofChunk(stream, state) {
    $047c1ab4bb23a40d$var$debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $047c1ab4bb23a40d$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $047c1ab4bb23a40d$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $047c1ab4bb23a40d$var$emitReadable(stream) {
    var state = stream._readableState;
    $047c1ab4bb23a40d$var$debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $047c1ab4bb23a40d$var$debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        $4DZrq.nextTick($047c1ab4bb23a40d$var$emitReadable_, stream);
    }
}
function $047c1ab4bb23a40d$var$emitReadable_(stream) {
    var state = stream._readableState;
    $047c1ab4bb23a40d$var$debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $047c1ab4bb23a40d$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $047c1ab4bb23a40d$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $4DZrq.nextTick($047c1ab4bb23a40d$var$maybeReadMore_, stream, state);
    }
}
function $047c1ab4bb23a40d$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $047c1ab4bb23a40d$var$debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$047c1ab4bb23a40d$var$Readable.prototype._read = function(n) {
    $047c1ab4bb23a40d$var$errorOrDestroy(this, new $047c1ab4bb23a40d$var$ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
$047c1ab4bb23a40d$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $047c1ab4bb23a40d$var$debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $4DZrq.stdout && dest !== $4DZrq.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $4DZrq.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $047c1ab4bb23a40d$var$debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $047c1ab4bb23a40d$var$debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $047c1ab4bb23a40d$var$pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        $047c1ab4bb23a40d$var$debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        $047c1ab4bb23a40d$var$debug('ondata');
        var ret = dest.write(chunk);
        $047c1ab4bb23a40d$var$debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $047c1ab4bb23a40d$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $047c1ab4bb23a40d$var$debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $047c1ab4bb23a40d$var$debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if ($047c1ab4bb23a40d$var$EElistenerCount(dest, 'error') === 0) $047c1ab4bb23a40d$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $047c1ab4bb23a40d$var$prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        $047c1ab4bb23a40d$var$debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        $047c1ab4bb23a40d$var$debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $047c1ab4bb23a40d$var$debug('pipe resume');
        src.resume();
    }
    return dest;
};
function $047c1ab4bb23a40d$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $047c1ab4bb23a40d$var$debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $047c1ab4bb23a40d$var$EElistenerCount(src, 'data')) {
            state.flowing = true;
            $047c1ab4bb23a40d$var$flow(src);
        }
    };
}
$047c1ab4bb23a40d$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $047c1ab4bb23a40d$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$047c1ab4bb23a40d$var$Readable.prototype.on = function(ev, fn) {
    var res = $a8ySM.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $047c1ab4bb23a40d$var$debug('on readable', state.length, state.reading);
            if (state.length) $047c1ab4bb23a40d$var$emitReadable(this);
            else if (!state.reading) $4DZrq.nextTick($047c1ab4bb23a40d$var$nReadingNextTick, this);
        }
    }
    return res;
};
$047c1ab4bb23a40d$var$Readable.prototype.addListener = $047c1ab4bb23a40d$var$Readable.prototype.on;
$047c1ab4bb23a40d$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $a8ySM.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $4DZrq.nextTick($047c1ab4bb23a40d$var$updateReadableListening, this);
    return res;
};
$047c1ab4bb23a40d$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $a8ySM.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $4DZrq.nextTick($047c1ab4bb23a40d$var$updateReadableListening, this);
    return res;
};
function $047c1ab4bb23a40d$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function $047c1ab4bb23a40d$var$nReadingNextTick(self) {
    $047c1ab4bb23a40d$var$debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$047c1ab4bb23a40d$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $047c1ab4bb23a40d$var$debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $047c1ab4bb23a40d$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $047c1ab4bb23a40d$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $4DZrq.nextTick($047c1ab4bb23a40d$var$resume_, stream, state);
    }
}
function $047c1ab4bb23a40d$var$resume_(stream, state) {
    $047c1ab4bb23a40d$var$debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    $047c1ab4bb23a40d$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$047c1ab4bb23a40d$var$Readable.prototype.pause = function() {
    $047c1ab4bb23a40d$var$debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $047c1ab4bb23a40d$var$debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function $047c1ab4bb23a40d$var$flow(stream) {
    var state = stream._readableState;
    $047c1ab4bb23a40d$var$debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$047c1ab4bb23a40d$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        $047c1ab4bb23a40d$var$debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        $047c1ab4bb23a40d$var$debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < $047c1ab4bb23a40d$var$kProxyEvents.length; n1++)stream.on($047c1ab4bb23a40d$var$kProxyEvents[n1], this.emit.bind(this, $047c1ab4bb23a40d$var$kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $047c1ab4bb23a40d$var$debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === 'function') $047c1ab4bb23a40d$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($047c1ab4bb23a40d$var$createReadableStreamAsyncIterator === undefined) $047c1ab4bb23a40d$var$createReadableStreamAsyncIterator = (parcelRequire("aAF4c"));
    return $047c1ab4bb23a40d$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($047c1ab4bb23a40d$var$Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($047c1ab4bb23a40d$var$Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($047c1ab4bb23a40d$var$Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$047c1ab4bb23a40d$var$Readable._fromList = $047c1ab4bb23a40d$var$fromList;
Object.defineProperty($047c1ab4bb23a40d$var$Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $047c1ab4bb23a40d$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $047c1ab4bb23a40d$var$endReadable(stream) {
    var state = stream._readableState;
    $047c1ab4bb23a40d$var$debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $4DZrq.nextTick($047c1ab4bb23a40d$var$endReadableNT, state, stream);
    }
}
function $047c1ab4bb23a40d$var$endReadableNT(state, stream) {
    $047c1ab4bb23a40d$var$debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === 'function') $047c1ab4bb23a40d$var$Readable.from = function(iterable, opts) {
    if ($047c1ab4bb23a40d$var$from === undefined) $047c1ab4bb23a40d$var$from = (parcelRequire("eV91e"));
    return $047c1ab4bb23a40d$var$from($047c1ab4bb23a40d$var$Readable, iterable, opts);
};
function $047c1ab4bb23a40d$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("4DZrq", function(module, exports) {
// shim for using process in browser
var $361a76e6ea33591f$var$process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $361a76e6ea33591f$var$cachedSetTimeout;
var $361a76e6ea33591f$var$cachedClearTimeout;
function $361a76e6ea33591f$var$defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function $361a76e6ea33591f$var$defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') $361a76e6ea33591f$var$cachedSetTimeout = setTimeout;
        else $361a76e6ea33591f$var$cachedSetTimeout = $361a76e6ea33591f$var$defaultSetTimout;
    } catch (e) {
        $361a76e6ea33591f$var$cachedSetTimeout = $361a76e6ea33591f$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') $361a76e6ea33591f$var$cachedClearTimeout = clearTimeout;
        else $361a76e6ea33591f$var$cachedClearTimeout = $361a76e6ea33591f$var$defaultClearTimeout;
    } catch (e1) {
        $361a76e6ea33591f$var$cachedClearTimeout = $361a76e6ea33591f$var$defaultClearTimeout;
    }
})();
function $361a76e6ea33591f$var$runTimeout(fun) {
    if ($361a76e6ea33591f$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($361a76e6ea33591f$var$cachedSetTimeout === $361a76e6ea33591f$var$defaultSetTimout || !$361a76e6ea33591f$var$cachedSetTimeout) && setTimeout) {
        $361a76e6ea33591f$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $361a76e6ea33591f$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $361a76e6ea33591f$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $361a76e6ea33591f$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $361a76e6ea33591f$var$runClearTimeout(marker) {
    if ($361a76e6ea33591f$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($361a76e6ea33591f$var$cachedClearTimeout === $361a76e6ea33591f$var$defaultClearTimeout || !$361a76e6ea33591f$var$cachedClearTimeout) && clearTimeout) {
        $361a76e6ea33591f$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $361a76e6ea33591f$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $361a76e6ea33591f$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $361a76e6ea33591f$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $361a76e6ea33591f$var$queue = [];
var $361a76e6ea33591f$var$draining = false;
var $361a76e6ea33591f$var$currentQueue;
var $361a76e6ea33591f$var$queueIndex = -1;
function $361a76e6ea33591f$var$cleanUpNextTick() {
    if (!$361a76e6ea33591f$var$draining || !$361a76e6ea33591f$var$currentQueue) return;
    $361a76e6ea33591f$var$draining = false;
    if ($361a76e6ea33591f$var$currentQueue.length) $361a76e6ea33591f$var$queue = $361a76e6ea33591f$var$currentQueue.concat($361a76e6ea33591f$var$queue);
    else $361a76e6ea33591f$var$queueIndex = -1;
    if ($361a76e6ea33591f$var$queue.length) $361a76e6ea33591f$var$drainQueue();
}
function $361a76e6ea33591f$var$drainQueue() {
    if ($361a76e6ea33591f$var$draining) return;
    var timeout = $361a76e6ea33591f$var$runTimeout($361a76e6ea33591f$var$cleanUpNextTick);
    $361a76e6ea33591f$var$draining = true;
    var len = $361a76e6ea33591f$var$queue.length;
    while(len){
        $361a76e6ea33591f$var$currentQueue = $361a76e6ea33591f$var$queue;
        $361a76e6ea33591f$var$queue = [];
        while(++$361a76e6ea33591f$var$queueIndex < len)if ($361a76e6ea33591f$var$currentQueue) $361a76e6ea33591f$var$currentQueue[$361a76e6ea33591f$var$queueIndex].run();
        $361a76e6ea33591f$var$queueIndex = -1;
        len = $361a76e6ea33591f$var$queue.length;
    }
    $361a76e6ea33591f$var$currentQueue = null;
    $361a76e6ea33591f$var$draining = false;
    $361a76e6ea33591f$var$runClearTimeout(timeout);
}
$361a76e6ea33591f$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $361a76e6ea33591f$var$queue.push(new $361a76e6ea33591f$var$Item(fun, args));
    if ($361a76e6ea33591f$var$queue.length === 1 && !$361a76e6ea33591f$var$draining) $361a76e6ea33591f$var$runTimeout($361a76e6ea33591f$var$drainQueue);
};
// v8 likes predictible objects
function $361a76e6ea33591f$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$361a76e6ea33591f$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$361a76e6ea33591f$var$process.title = 'browser';
$361a76e6ea33591f$var$process.browser = true;
$361a76e6ea33591f$var$process.env = {
};
$361a76e6ea33591f$var$process.argv = [];
$361a76e6ea33591f$var$process.version = ''; // empty string to avoid regexp issues
$361a76e6ea33591f$var$process.versions = {
};
function $361a76e6ea33591f$var$noop() {
}
$361a76e6ea33591f$var$process.on = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.addListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.once = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.off = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.removeListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.removeAllListeners = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.emit = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.prependListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.prependOnceListener = $361a76e6ea33591f$var$noop;
$361a76e6ea33591f$var$process.listeners = function(name) {
    return [];
};
$361a76e6ea33591f$var$process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
$361a76e6ea33591f$var$process.cwd = function() {
    return '/';
};
$361a76e6ea33591f$var$process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
$361a76e6ea33591f$var$process.umask = function() {
    return 0;
};

});

parcelRequire.register("a8ySM", function(module, exports) {

module.exports = (parcelRequire("2fbJO")).EventEmitter;

});

parcelRequire.register("XDU19", function(module, exports) {
"use strict";

});

parcelRequire.register("hMFMp", function(module, exports) {
'use strict';
function $cf2753f1103c8e9f$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $cf2753f1103c8e9f$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) $cf2753f1103c8e9f$var$ownKeys(Object(source), true).forEach(function(key) {
            $cf2753f1103c8e9f$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $cf2753f1103c8e9f$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $cf2753f1103c8e9f$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $cf2753f1103c8e9f$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $cf2753f1103c8e9f$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $cf2753f1103c8e9f$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $cf2753f1103c8e9f$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $cf2753f1103c8e9f$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $cf2753f1103c8e9f$var$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;

var $XDU19 = parcelRequire("XDU19");
var $cf2753f1103c8e9f$var$inspect = $XDU19.inspect;
var $cf2753f1103c8e9f$var$custom = $cf2753f1103c8e9f$var$inspect && $cf2753f1103c8e9f$var$inspect.custom || 'inspect';
function $cf2753f1103c8e9f$var$copyBuffer(src, target, offset) {
    $cf2753f1103c8e9f$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        $cf2753f1103c8e9f$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $cf2753f1103c8e9f$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $cf2753f1103c8e9f$var$Buffer.alloc(0);
                var ret = $cf2753f1103c8e9f$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $cf2753f1103c8e9f$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $cf2753f1103c8e9f$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $cf2753f1103c8e9f$var$custom,
            value: function value(_, options) {
                return $cf2753f1103c8e9f$var$inspect(this, $cf2753f1103c8e9f$var$_objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

});

parcelRequire.register("hziyW", function(module, exports) {
'use strict'; // undocumented cb() API, needed for core, not for public API

var $4DZrq = parcelRequire("4DZrq");
function $cca41aae41fd3fd6$var$destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) $4DZrq.nextTick($cca41aae41fd3fd6$var$emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $4DZrq.nextTick($cca41aae41fd3fd6$var$emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $4DZrq.nextTick($cca41aae41fd3fd6$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $4DZrq.nextTick($cca41aae41fd3fd6$var$emitErrorAndCloseNT, _this, err);
            } else $4DZrq.nextTick($cca41aae41fd3fd6$var$emitCloseNT, _this);
        } else if (cb) {
            $4DZrq.nextTick($cca41aae41fd3fd6$var$emitCloseNT, _this);
            cb(err);
        } else $4DZrq.nextTick($cca41aae41fd3fd6$var$emitCloseNT, _this);
    });
    return this;
}
function $cca41aae41fd3fd6$var$emitErrorAndCloseNT(self, err) {
    $cca41aae41fd3fd6$var$emitErrorNT(self, err);
    $cca41aae41fd3fd6$var$emitCloseNT(self);
}
function $cca41aae41fd3fd6$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function $cca41aae41fd3fd6$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $cca41aae41fd3fd6$var$emitErrorNT(self, err) {
    self.emit('error', err);
}
function $cca41aae41fd3fd6$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: $cca41aae41fd3fd6$var$destroy,
    undestroy: $cca41aae41fd3fd6$var$undestroy,
    errorOrDestroy: $cca41aae41fd3fd6$var$errorOrDestroy
};

});

parcelRequire.register("crhoq", function(module, exports) {
'use strict';

var $ju46Y = parcelRequire("ju46Y");
var $90e57f81aab7a1a3$var$ERR_INVALID_OPT_VALUE = $ju46Y.codes.ERR_INVALID_OPT_VALUE;
function $90e57f81aab7a1a3$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $90e57f81aab7a1a3$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $90e57f81aab7a1a3$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new $90e57f81aab7a1a3$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $90e57f81aab7a1a3$var$getHighWaterMark
};

});
parcelRequire.register("ju46Y", function(module, exports) {

$parcel$export(module.exports, "codes", () => $e2f4021e928ad60d$export$e45cb6485273080e, (v) => $e2f4021e928ad60d$export$e45cb6485273080e = v);
var $e2f4021e928ad60d$export$e45cb6485273080e;
'use strict';
function $e2f4021e928ad60d$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $e2f4021e928ad60d$var$codes = {
};
function $e2f4021e928ad60d$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        $e2f4021e928ad60d$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    $e2f4021e928ad60d$var$codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $e2f4021e928ad60d$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $e2f4021e928ad60d$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $e2f4021e928ad60d$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $e2f4021e928ad60d$var$includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$e2f4021e928ad60d$var$createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$e2f4021e928ad60d$var$createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && $e2f4021e928ad60d$var$startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if ($e2f4021e928ad60d$var$endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($e2f4021e928ad60d$var$oneOf(expected, 'type'));
    else {
        var type = $e2f4021e928ad60d$var$includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat($e2f4021e928ad60d$var$oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$e2f4021e928ad60d$var$createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
$e2f4021e928ad60d$var$createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
$e2f4021e928ad60d$var$createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
$e2f4021e928ad60d$var$createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
$e2f4021e928ad60d$var$createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
$e2f4021e928ad60d$var$createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
$e2f4021e928ad60d$var$createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
$e2f4021e928ad60d$var$createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
$e2f4021e928ad60d$var$createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
$e2f4021e928ad60d$var$createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
$e2f4021e928ad60d$export$e45cb6485273080e = $e2f4021e928ad60d$var$codes;

});


parcelRequire.register("9NHYD", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';

var $4DZrq = parcelRequire("4DZrq");
/*<replacement>*/ var $722acd8fce14028e$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $722acd8fce14028e$var$Duplex;

var $nS5tr = parcelRequire("nS5tr");

var $fyohC = parcelRequire("fyohC");

(parcelRequire("bGPXt"))($722acd8fce14028e$var$Duplex, $nS5tr);
// Allow the keys array to be GC'ed.
var $722acd8fce14028e$var$keys = $722acd8fce14028e$var$objectKeys($fyohC.prototype);
for(var $722acd8fce14028e$var$v = 0; $722acd8fce14028e$var$v < $722acd8fce14028e$var$keys.length; $722acd8fce14028e$var$v++){
    var $722acd8fce14028e$var$method = $722acd8fce14028e$var$keys[$722acd8fce14028e$var$v];
    if (!$722acd8fce14028e$var$Duplex.prototype[$722acd8fce14028e$var$method]) $722acd8fce14028e$var$Duplex.prototype[$722acd8fce14028e$var$method] = $fyohC.prototype[$722acd8fce14028e$var$method];
}
function $722acd8fce14028e$var$Duplex(options) {
    if (!(this instanceof $722acd8fce14028e$var$Duplex)) return new $722acd8fce14028e$var$Duplex(options);
    $nS5tr.call(this, options);
    $fyohC.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', $722acd8fce14028e$var$onend);
        }
    }
}
Object.defineProperty($722acd8fce14028e$var$Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($722acd8fce14028e$var$Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($722acd8fce14028e$var$Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $722acd8fce14028e$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $4DZrq.nextTick($722acd8fce14028e$var$onEndNT, this);
}
function $722acd8fce14028e$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($722acd8fce14028e$var$Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("fyohC", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

var $4DZrq = parcelRequire("4DZrq");
module.exports = $b52cde234eac620f$var$Writable;
/* <replacement> */ function $b52cde234eac620f$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $b52cde234eac620f$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $b52cde234eac620f$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $b52cde234eac620f$var$Duplex;
/*</replacement>*/ $b52cde234eac620f$var$Writable.WritableState = $b52cde234eac620f$var$WritableState;

/*<replacement>*/ var $b52cde234eac620f$var$internalUtil = {
    deprecate: (parcelRequire("7gAKk"))
};

var $a8ySM = parcelRequire("a8ySM");

var $b52cde234eac620f$require$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;
var $b52cde234eac620f$var$OurUint8Array = $parcel$global.Uint8Array || function() {
};
function $b52cde234eac620f$var$_uint8ArrayToBuffer(chunk) {
    return $b52cde234eac620f$require$Buffer.from(chunk);
}
function $b52cde234eac620f$var$_isUint8Array(obj) {
    return $b52cde234eac620f$require$Buffer.isBuffer(obj) || obj instanceof $b52cde234eac620f$var$OurUint8Array;
}

var $hziyW = parcelRequire("hziyW");

var $crhoq = parcelRequire("crhoq");
var $b52cde234eac620f$var$getHighWaterMark = $crhoq.getHighWaterMark;

var $ju46Y = parcelRequire("ju46Y");
var $b52cde234eac620f$require$_require$codes = $ju46Y.codes;
var $b52cde234eac620f$var$ERR_INVALID_ARG_TYPE = $b52cde234eac620f$require$_require$codes.ERR_INVALID_ARG_TYPE, $b52cde234eac620f$var$ERR_METHOD_NOT_IMPLEMENTED = $b52cde234eac620f$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $b52cde234eac620f$var$ERR_MULTIPLE_CALLBACK = $b52cde234eac620f$require$_require$codes.ERR_MULTIPLE_CALLBACK, $b52cde234eac620f$var$ERR_STREAM_CANNOT_PIPE = $b52cde234eac620f$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $b52cde234eac620f$var$ERR_STREAM_DESTROYED = $b52cde234eac620f$require$_require$codes.ERR_STREAM_DESTROYED, $b52cde234eac620f$var$ERR_STREAM_NULL_VALUES = $b52cde234eac620f$require$_require$codes.ERR_STREAM_NULL_VALUES, $b52cde234eac620f$var$ERR_STREAM_WRITE_AFTER_END = $b52cde234eac620f$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $b52cde234eac620f$var$ERR_UNKNOWN_ENCODING = $b52cde234eac620f$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $b52cde234eac620f$var$errorOrDestroy = $hziyW.errorOrDestroy;

(parcelRequire("bGPXt"))($b52cde234eac620f$var$Writable, $a8ySM);
function $b52cde234eac620f$var$nop() {
}

function $b52cde234eac620f$var$WritableState(options, stream, isDuplex) {
    $b52cde234eac620f$var$Duplex = $b52cde234eac620f$var$Duplex || (parcelRequire("9NHYD"));
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $b52cde234eac620f$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $b52cde234eac620f$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $b52cde234eac620f$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $b52cde234eac620f$var$CorkedRequest(this);
}
$b52cde234eac620f$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($b52cde234eac620f$var$WritableState.prototype, 'buffer', {
            get: $b52cde234eac620f$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $b52cde234eac620f$var$realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    $b52cde234eac620f$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($b52cde234eac620f$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($b52cde234eac620f$var$realHasInstance.call(this, object)) return true;
            if (this !== $b52cde234eac620f$var$Writable) return false;
            return object && object._writableState instanceof $b52cde234eac620f$var$WritableState;
        }
    });
} else $b52cde234eac620f$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $b52cde234eac620f$var$Writable(options) {
    $b52cde234eac620f$var$Duplex = $b52cde234eac620f$var$Duplex || (parcelRequire("9NHYD")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $b52cde234eac620f$var$Duplex;
    if (!isDuplex && !$b52cde234eac620f$var$realHasInstance.call($b52cde234eac620f$var$Writable, this)) return new $b52cde234eac620f$var$Writable(options);
    this._writableState = new $b52cde234eac620f$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    $a8ySM.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$b52cde234eac620f$var$Writable.prototype.pipe = function() {
    $b52cde234eac620f$var$errorOrDestroy(this, new $b52cde234eac620f$var$ERR_STREAM_CANNOT_PIPE());
};
function $b52cde234eac620f$var$writeAfterEnd(stream, cb) {
    var er = new $b52cde234eac620f$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $b52cde234eac620f$var$errorOrDestroy(stream, er);
    $4DZrq.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $b52cde234eac620f$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $b52cde234eac620f$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new $b52cde234eac620f$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        $b52cde234eac620f$var$errorOrDestroy(stream, er);
        $4DZrq.nextTick(cb, er);
        return false;
    }
    return true;
}
$b52cde234eac620f$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $b52cde234eac620f$var$_isUint8Array(chunk);
    if (isBuf && !$b52cde234eac620f$require$Buffer.isBuffer(chunk)) chunk = $b52cde234eac620f$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = $b52cde234eac620f$var$nop;
    if (state.ending) $b52cde234eac620f$var$writeAfterEnd(this, cb);
    else if (isBuf || $b52cde234eac620f$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $b52cde234eac620f$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$b52cde234eac620f$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$b52cde234eac620f$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $b52cde234eac620f$var$clearBuffer(this, state);
    }
};
$b52cde234eac620f$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new $b52cde234eac620f$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($b52cde234eac620f$var$Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $b52cde234eac620f$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = $b52cde234eac620f$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($b52cde234eac620f$var$Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $b52cde234eac620f$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $b52cde234eac620f$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $b52cde234eac620f$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $b52cde234eac620f$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $b52cde234eac620f$var$ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $b52cde234eac620f$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $4DZrq.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $4DZrq.nextTick($b52cde234eac620f$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $b52cde234eac620f$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $b52cde234eac620f$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $b52cde234eac620f$var$finishMaybe(stream, state);
    }
}
function $b52cde234eac620f$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $b52cde234eac620f$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new $b52cde234eac620f$var$ERR_MULTIPLE_CALLBACK();
    $b52cde234eac620f$var$onwriteStateUpdate(state);
    if (er) $b52cde234eac620f$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $b52cde234eac620f$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $b52cde234eac620f$var$clearBuffer(stream, state);
        if (sync) $4DZrq.nextTick($b52cde234eac620f$var$afterWrite, stream, state, finished, cb);
        else $b52cde234eac620f$var$afterWrite(stream, state, finished, cb);
    }
}
function $b52cde234eac620f$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $b52cde234eac620f$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $b52cde234eac620f$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $b52cde234eac620f$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function $b52cde234eac620f$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $b52cde234eac620f$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $b52cde234eac620f$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $b52cde234eac620f$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$b52cde234eac620f$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $b52cde234eac620f$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
$b52cde234eac620f$var$Writable.prototype._writev = null;
$b52cde234eac620f$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $b52cde234eac620f$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($b52cde234eac620f$var$Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $b52cde234eac620f$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $b52cde234eac620f$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $b52cde234eac620f$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        $b52cde234eac620f$var$finishMaybe(stream, state);
    });
}
function $b52cde234eac620f$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $4DZrq.nextTick($b52cde234eac620f$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function $b52cde234eac620f$var$finishMaybe(stream, state) {
    var need = $b52cde234eac620f$var$needFinish(state);
    if (need) {
        $b52cde234eac620f$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $b52cde234eac620f$var$endWritable(stream, state, cb) {
    state.ending = true;
    $b52cde234eac620f$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $4DZrq.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $b52cde234eac620f$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($b52cde234eac620f$var$Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$b52cde234eac620f$var$Writable.prototype.destroy = $hziyW.destroy;
$b52cde234eac620f$var$Writable.prototype._undestroy = $hziyW.undestroy;
$b52cde234eac620f$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRequire.register("7gAKk", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $54a6880b06c5ae68$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $54a6880b06c5ae68$var$deprecate(fn, msg) {
    if ($54a6880b06c5ae68$var$config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($54a6880b06c5ae68$var$config('throwDeprecation')) throw new Error(msg);
            else if ($54a6880b06c5ae68$var$config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $54a6880b06c5ae68$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

});



parcelRequire.register("2ebqm", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", () => $19f5c02ab1d2c60f$export$63a7aa211a91ed69, (v) => $19f5c02ab1d2c60f$export$63a7aa211a91ed69 = v);
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $19f5c02ab1d2c60f$export$63a7aa211a91ed69;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $3nSaB = parcelRequire("3nSaB");
var $19f5c02ab1d2c60f$require$Buffer = $3nSaB.Buffer;
/*</replacement>*/ var $19f5c02ab1d2c60f$var$isEncoding = $19f5c02ab1d2c60f$require$Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function $19f5c02ab1d2c60f$var$_normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $19f5c02ab1d2c60f$var$normalizeEncoding(enc) {
    var nenc = $19f5c02ab1d2c60f$var$_normalizeEncoding(enc);
    if (typeof nenc !== 'string' && ($19f5c02ab1d2c60f$require$Buffer.isEncoding === $19f5c02ab1d2c60f$var$isEncoding || !$19f5c02ab1d2c60f$var$isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
$19f5c02ab1d2c60f$export$63a7aa211a91ed69 = $19f5c02ab1d2c60f$var$StringDecoder;
function $19f5c02ab1d2c60f$var$StringDecoder(encoding) {
    this.encoding = $19f5c02ab1d2c60f$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = $19f5c02ab1d2c60f$var$utf16Text;
            this.end = $19f5c02ab1d2c60f$var$utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = $19f5c02ab1d2c60f$var$utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = $19f5c02ab1d2c60f$var$base64Text;
            this.end = $19f5c02ab1d2c60f$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $19f5c02ab1d2c60f$var$simpleWrite;
            this.end = $19f5c02ab1d2c60f$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $19f5c02ab1d2c60f$require$Buffer.allocUnsafe(nb);
}
$19f5c02ab1d2c60f$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
$19f5c02ab1d2c60f$var$StringDecoder.prototype.end = $19f5c02ab1d2c60f$var$utf8End;
// Returns only complete characters in a Buffer
$19f5c02ab1d2c60f$var$StringDecoder.prototype.text = $19f5c02ab1d2c60f$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$19f5c02ab1d2c60f$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $19f5c02ab1d2c60f$var$utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $19f5c02ab1d2c60f$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $19f5c02ab1d2c60f$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $19f5c02ab1d2c60f$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $19f5c02ab1d2c60f$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $19f5c02ab1d2c60f$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $19f5c02ab1d2c60f$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $19f5c02ab1d2c60f$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $19f5c02ab1d2c60f$var$utf8Text(buf, i) {
    var total = $19f5c02ab1d2c60f$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $19f5c02ab1d2c60f$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $19f5c02ab1d2c60f$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $19f5c02ab1d2c60f$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function $19f5c02ab1d2c60f$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function $19f5c02ab1d2c60f$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $19f5c02ab1d2c60f$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $19f5c02ab1d2c60f$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

});
parcelRequire.register("3nSaB", function(module, exports) {

var $276d8a1e65e4f408$var$Buffer = $7aaf889172aa0226$exports.Buffer;
// alternative to using Object.keys for old browsers
function $276d8a1e65e4f408$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($276d8a1e65e4f408$var$Buffer.from && $276d8a1e65e4f408$var$Buffer.alloc && $276d8a1e65e4f408$var$Buffer.allocUnsafe && $276d8a1e65e4f408$var$Buffer.allocUnsafeSlow) module.exports = $7aaf889172aa0226$exports;
else {
    // Copy properties from require('buffer')
    $276d8a1e65e4f408$var$copyProps($7aaf889172aa0226$exports, module.exports);
    module.exports.Buffer = $276d8a1e65e4f408$var$SafeBuffer;
}
function $276d8a1e65e4f408$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $276d8a1e65e4f408$var$Buffer(arg, encodingOrOffset, length);
}
// Copy static methods from Buffer
$276d8a1e65e4f408$var$copyProps($276d8a1e65e4f408$var$Buffer, $276d8a1e65e4f408$var$SafeBuffer);
$276d8a1e65e4f408$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return $276d8a1e65e4f408$var$Buffer(arg, encodingOrOffset, length);
};
$276d8a1e65e4f408$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = $276d8a1e65e4f408$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$276d8a1e65e4f408$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $276d8a1e65e4f408$var$Buffer(size);
};
$276d8a1e65e4f408$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $7aaf889172aa0226$exports.SlowBuffer(size);
};

});


parcelRequire.register("aAF4c", function(module, exports) {
'use strict';

var $4DZrq = parcelRequire("4DZrq");
var $7b5d1f26ecd8017f$var$_Object$setPrototypeO;
function $7b5d1f26ecd8017f$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $iDiJV = parcelRequire("iDiJV");
var $7b5d1f26ecd8017f$var$kLastResolve = Symbol('lastResolve');
var $7b5d1f26ecd8017f$var$kLastReject = Symbol('lastReject');
var $7b5d1f26ecd8017f$var$kError = Symbol('error');
var $7b5d1f26ecd8017f$var$kEnded = Symbol('ended');
var $7b5d1f26ecd8017f$var$kLastPromise = Symbol('lastPromise');
var $7b5d1f26ecd8017f$var$kHandlePromise = Symbol('handlePromise');
var $7b5d1f26ecd8017f$var$kStream = Symbol('stream');
function $7b5d1f26ecd8017f$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $7b5d1f26ecd8017f$var$readAndResolve(iter) {
    var resolve = iter[$7b5d1f26ecd8017f$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$7b5d1f26ecd8017f$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$7b5d1f26ecd8017f$var$kLastPromise] = null;
            iter[$7b5d1f26ecd8017f$var$kLastResolve] = null;
            iter[$7b5d1f26ecd8017f$var$kLastReject] = null;
            resolve($7b5d1f26ecd8017f$var$createIterResult(data, false));
        }
    }
}
function $7b5d1f26ecd8017f$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $4DZrq.nextTick($7b5d1f26ecd8017f$var$readAndResolve, iter);
}
function $7b5d1f26ecd8017f$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$7b5d1f26ecd8017f$var$kEnded]) {
                resolve($7b5d1f26ecd8017f$var$createIterResult(undefined, true));
                return;
            }
            iter[$7b5d1f26ecd8017f$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $7b5d1f26ecd8017f$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var $7b5d1f26ecd8017f$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($7b5d1f26ecd8017f$var$_Object$setPrototypeO = {
    get stream () {
        return this[$7b5d1f26ecd8017f$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$7b5d1f26ecd8017f$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$7b5d1f26ecd8017f$var$kEnded]) return Promise.resolve($7b5d1f26ecd8017f$var$createIterResult(undefined, true));
        if (this[$7b5d1f26ecd8017f$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $4DZrq.nextTick(function() {
                if (_this[$7b5d1f26ecd8017f$var$kError]) reject(_this[$7b5d1f26ecd8017f$var$kError]);
                else resolve($7b5d1f26ecd8017f$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$7b5d1f26ecd8017f$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($7b5d1f26ecd8017f$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$7b5d1f26ecd8017f$var$kStream].read();
            if (data !== null) return Promise.resolve($7b5d1f26ecd8017f$var$createIterResult(data, false));
            promise = new Promise(this[$7b5d1f26ecd8017f$var$kHandlePromise]);
        }
        this[$7b5d1f26ecd8017f$var$kLastPromise] = promise;
        return promise;
    }
}, $7b5d1f26ecd8017f$var$_defineProperty($7b5d1f26ecd8017f$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $7b5d1f26ecd8017f$var$_defineProperty($7b5d1f26ecd8017f$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$7b5d1f26ecd8017f$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($7b5d1f26ecd8017f$var$createIterResult(undefined, true));
        });
    });
}), $7b5d1f26ecd8017f$var$_Object$setPrototypeO), $7b5d1f26ecd8017f$var$AsyncIteratorPrototype);
var $7b5d1f26ecd8017f$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($7b5d1f26ecd8017f$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, $7b5d1f26ecd8017f$var$_defineProperty(_Object$create, $7b5d1f26ecd8017f$var$kStream, {
        value: stream,
        writable: true
    }), $7b5d1f26ecd8017f$var$_defineProperty(_Object$create, $7b5d1f26ecd8017f$var$kLastResolve, {
        value: null,
        writable: true
    }), $7b5d1f26ecd8017f$var$_defineProperty(_Object$create, $7b5d1f26ecd8017f$var$kLastReject, {
        value: null,
        writable: true
    }), $7b5d1f26ecd8017f$var$_defineProperty(_Object$create, $7b5d1f26ecd8017f$var$kError, {
        value: null,
        writable: true
    }), $7b5d1f26ecd8017f$var$_defineProperty(_Object$create, $7b5d1f26ecd8017f$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $7b5d1f26ecd8017f$var$_defineProperty(_Object$create, $7b5d1f26ecd8017f$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$7b5d1f26ecd8017f$var$kStream].read();
            if (data) {
                iterator[$7b5d1f26ecd8017f$var$kLastPromise] = null;
                iterator[$7b5d1f26ecd8017f$var$kLastResolve] = null;
                iterator[$7b5d1f26ecd8017f$var$kLastReject] = null;
                resolve($7b5d1f26ecd8017f$var$createIterResult(data, false));
            } else {
                iterator[$7b5d1f26ecd8017f$var$kLastResolve] = resolve;
                iterator[$7b5d1f26ecd8017f$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$7b5d1f26ecd8017f$var$kLastPromise] = null;
    $iDiJV(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[$7b5d1f26ecd8017f$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$7b5d1f26ecd8017f$var$kLastPromise] = null;
                iterator[$7b5d1f26ecd8017f$var$kLastResolve] = null;
                iterator[$7b5d1f26ecd8017f$var$kLastReject] = null;
                reject(err);
            }
            iterator[$7b5d1f26ecd8017f$var$kError] = err;
            return;
        }
        var resolve = iterator[$7b5d1f26ecd8017f$var$kLastResolve];
        if (resolve !== null) {
            iterator[$7b5d1f26ecd8017f$var$kLastPromise] = null;
            iterator[$7b5d1f26ecd8017f$var$kLastResolve] = null;
            iterator[$7b5d1f26ecd8017f$var$kLastReject] = null;
            resolve($7b5d1f26ecd8017f$var$createIterResult(undefined, true));
        }
        iterator[$7b5d1f26ecd8017f$var$kEnded] = true;
    });
    stream.on('readable', $7b5d1f26ecd8017f$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $7b5d1f26ecd8017f$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("iDiJV", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var $ju46Y = parcelRequire("ju46Y");
var $d90a67d924af315c$var$ERR_STREAM_PREMATURE_CLOSE = $ju46Y.codes.ERR_STREAM_PREMATURE_CLOSE;
function $d90a67d924af315c$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $d90a67d924af315c$var$noop() {
}
function $d90a67d924af315c$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function $d90a67d924af315c$var$eos(stream, opts, callback) {
    if (typeof opts === 'function') return $d90a67d924af315c$var$eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = $d90a67d924af315c$var$once(callback || $d90a67d924af315c$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $d90a67d924af315c$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $d90a67d924af315c$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if ($d90a67d924af315c$var$isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = $d90a67d924af315c$var$eos;

});


parcelRequire.register("eV91e", function(module, exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

});


parcelRequire.register("aQy8i", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = $7e593cc5cd243040$var$Transform;

var $ju46Y = parcelRequire("ju46Y");
var $7e593cc5cd243040$require$_require$codes = $ju46Y.codes;
var $7e593cc5cd243040$var$ERR_METHOD_NOT_IMPLEMENTED = $7e593cc5cd243040$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $7e593cc5cd243040$var$ERR_MULTIPLE_CALLBACK = $7e593cc5cd243040$require$_require$codes.ERR_MULTIPLE_CALLBACK, $7e593cc5cd243040$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $7e593cc5cd243040$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $7e593cc5cd243040$var$ERR_TRANSFORM_WITH_LENGTH_0 = $7e593cc5cd243040$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $9NHYD = parcelRequire("9NHYD");

(parcelRequire("bGPXt"))($7e593cc5cd243040$var$Transform, $9NHYD);
function $7e593cc5cd243040$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new $7e593cc5cd243040$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $7e593cc5cd243040$var$Transform(options) {
    if (!(this instanceof $7e593cc5cd243040$var$Transform)) return new $7e593cc5cd243040$var$Transform(options);
    $9NHYD.call(this, options);
    this._transformState = {
        afterTransform: $7e593cc5cd243040$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', $7e593cc5cd243040$var$prefinish);
}
function $7e593cc5cd243040$var$prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        $7e593cc5cd243040$var$done(_this, er, data);
    });
    else $7e593cc5cd243040$var$done(this, null, null);
}
$7e593cc5cd243040$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $9NHYD.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$7e593cc5cd243040$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $7e593cc5cd243040$var$ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
$7e593cc5cd243040$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$7e593cc5cd243040$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$7e593cc5cd243040$var$Transform.prototype._destroy = function(err, cb) {
    $9NHYD.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $7e593cc5cd243040$var$done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $7e593cc5cd243040$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $7e593cc5cd243040$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("hFiQr", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = $cdc4e2374e9b67c8$var$PassThrough;

var $aQy8i = parcelRequire("aQy8i");

(parcelRequire("bGPXt"))($cdc4e2374e9b67c8$var$PassThrough, $aQy8i);
function $cdc4e2374e9b67c8$var$PassThrough(options) {
    if (!(this instanceof $cdc4e2374e9b67c8$var$PassThrough)) return new $cdc4e2374e9b67c8$var$PassThrough(options);
    $aQy8i.call(this, options);
}
$cdc4e2374e9b67c8$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("hCdMG", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var $cd30ad8902bbcfaa$var$eos;
function $cd30ad8902bbcfaa$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $ju46Y = parcelRequire("ju46Y");
var $cd30ad8902bbcfaa$require$_require$codes = $ju46Y.codes;
var $cd30ad8902bbcfaa$var$ERR_MISSING_ARGS = $cd30ad8902bbcfaa$require$_require$codes.ERR_MISSING_ARGS, $cd30ad8902bbcfaa$var$ERR_STREAM_DESTROYED = $cd30ad8902bbcfaa$require$_require$codes.ERR_STREAM_DESTROYED;
function $cd30ad8902bbcfaa$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $cd30ad8902bbcfaa$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}

function $cd30ad8902bbcfaa$var$destroyer(stream, reading, writing, callback) {
    callback = $cd30ad8902bbcfaa$var$once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if ($cd30ad8902bbcfaa$var$eos === undefined) $cd30ad8902bbcfaa$var$eos = (parcelRequire("iDiJV"));
    $cd30ad8902bbcfaa$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($cd30ad8902bbcfaa$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new $cd30ad8902bbcfaa$var$ERR_STREAM_DESTROYED('pipe'));
    };
}
function $cd30ad8902bbcfaa$var$call(fn) {
    fn();
}
function $cd30ad8902bbcfaa$var$pipe(from, to) {
    return from.pipe(to);
}
function $cd30ad8902bbcfaa$var$popCallback(streams) {
    if (!streams.length) return $cd30ad8902bbcfaa$var$noop;
    if (typeof streams[streams.length - 1] !== 'function') return $cd30ad8902bbcfaa$var$noop;
    return streams.pop();
}
function $cd30ad8902bbcfaa$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $cd30ad8902bbcfaa$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $cd30ad8902bbcfaa$var$ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $cd30ad8902bbcfaa$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($cd30ad8902bbcfaa$var$call);
            if (reading) return;
            destroys.forEach($cd30ad8902bbcfaa$var$call);
            callback(error);
        });
    });
    return streams.reduce($cd30ad8902bbcfaa$var$pipe);
}
module.exports = $cd30ad8902bbcfaa$var$pipeline;

});


parcelRequire.register("e4AID", function(module, exports) {

var $4DZrq = parcelRequire("4DZrq");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var $a3edec03a197d5a0$var$getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {
    };
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var $a3edec03a197d5a0$var$formatRegExp = /%[sdj%]/g;
module.exports.format = function(f) {
    if (!$a3edec03a197d5a0$var$isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push($a3edec03a197d5a0$var$inspect(arguments[i]));
        return objects.join(' ');
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace($a3edec03a197d5a0$var$formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch(x){
            case '%s':
                return String(args[i++]);
            case '%d':
                return Number(args[i++]);
            case '%j':
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return '[Circular]';
                }
            default:
                return x;
        }
    });
    for(var x1 = args[i]; i < len; x1 = args[++i])if ($a3edec03a197d5a0$var$isNull(x1) || !$a3edec03a197d5a0$var$isObject(x1)) str += ' ' + x1;
    else str += ' ' + $a3edec03a197d5a0$var$inspect(x1);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
module.exports.deprecate = function(fn, msg) {
    if (typeof $4DZrq !== 'undefined' && $4DZrq.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof $4DZrq === 'undefined') return function() {
        return module.exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($4DZrq.throwDeprecation) throw new Error(msg);
            else if ($4DZrq.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var $a3edec03a197d5a0$var$debugs = {
};
var $a3edec03a197d5a0$var$debugEnvRegex = /^$/;
var $a3edec03a197d5a0$var$debugEnv;
module.exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!$a3edec03a197d5a0$var$debugs[set]) {
        if ($a3edec03a197d5a0$var$debugEnvRegex.test(set)) {
            var pid = $4DZrq.pid;
            $a3edec03a197d5a0$var$debugs[set] = function() {
                var msg = module.exports.format.apply(module.exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
            };
        } else $a3edec03a197d5a0$var$debugs[set] = function() {
        };
    }
    return $a3edec03a197d5a0$var$debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function $a3edec03a197d5a0$var$inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: $a3edec03a197d5a0$var$stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if ($a3edec03a197d5a0$var$isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    module.exports._extend(ctx, opts);
    // set default options
    if ($a3edec03a197d5a0$var$isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if ($a3edec03a197d5a0$var$isUndefined(ctx.depth)) ctx.depth = 2;
    if ($a3edec03a197d5a0$var$isUndefined(ctx.colors)) ctx.colors = false;
    if ($a3edec03a197d5a0$var$isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = $a3edec03a197d5a0$var$stylizeWithColor;
    return $a3edec03a197d5a0$var$formatValue(ctx, obj, ctx.depth);
}
module.exports.inspect = $a3edec03a197d5a0$var$inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
$a3edec03a197d5a0$var$inspect.colors = {
    'bold': [
        1,
        22
    ],
    'italic': [
        3,
        23
    ],
    'underline': [
        4,
        24
    ],
    'inverse': [
        7,
        27
    ],
    'white': [
        37,
        39
    ],
    'grey': [
        90,
        39
    ],
    'black': [
        30,
        39
    ],
    'blue': [
        34,
        39
    ],
    'cyan': [
        36,
        39
    ],
    'green': [
        32,
        39
    ],
    'magenta': [
        35,
        39
    ],
    'red': [
        31,
        39
    ],
    'yellow': [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
$a3edec03a197d5a0$var$inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
};
function $a3edec03a197d5a0$var$stylizeWithColor(str, styleType) {
    var style = $a3edec03a197d5a0$var$inspect.styles[styleType];
    if (style) return '\u001b[' + $a3edec03a197d5a0$var$inspect.colors[style][0] + 'm' + str + '\u001b[' + $a3edec03a197d5a0$var$inspect.colors[style][1] + 'm';
    else return str;
}
function $a3edec03a197d5a0$var$stylizeNoColor(str, styleType) {
    return str;
}
function $a3edec03a197d5a0$var$arrayToHash(array) {
    var hash = {
    };
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function $a3edec03a197d5a0$var$formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && $a3edec03a197d5a0$var$isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== module.exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!$a3edec03a197d5a0$var$isString(ret)) ret = $a3edec03a197d5a0$var$formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = $a3edec03a197d5a0$var$formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = $a3edec03a197d5a0$var$arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if ($a3edec03a197d5a0$var$isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) return $a3edec03a197d5a0$var$formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if ($a3edec03a197d5a0$var$isFunction(value)) {
            var name = value.name ? ': ' + value.name : '';
            return ctx.stylize('[Function' + name + ']', 'special');
        }
        if ($a3edec03a197d5a0$var$isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        if ($a3edec03a197d5a0$var$isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), 'date');
        if ($a3edec03a197d5a0$var$isError(value)) return $a3edec03a197d5a0$var$formatError(value);
    }
    var base = '', array = false, braces = [
        '{',
        '}'
    ];
    // Make Array say that they are Array
    if ($a3edec03a197d5a0$var$isArray(value)) {
        array = true;
        braces = [
            '[',
            ']'
        ];
    }
    // Make functions say that they are functions
    if ($a3edec03a197d5a0$var$isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
    }
    // Make RegExps say that they are RegExps
    if ($a3edec03a197d5a0$var$isRegExp(value)) base = ' ' + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if ($a3edec03a197d5a0$var$isDate(value)) base = ' ' + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if ($a3edec03a197d5a0$var$isError(value)) base = ' ' + $a3edec03a197d5a0$var$formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if ($a3edec03a197d5a0$var$isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        else return ctx.stylize('[Object]', 'special');
    }
    ctx.seen.push(value);
    var output;
    if (array) output = $a3edec03a197d5a0$var$formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return $a3edec03a197d5a0$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return $a3edec03a197d5a0$var$reduceToSingleString(output, base, braces);
}
function $a3edec03a197d5a0$var$formatPrimitive(ctx, value) {
    if ($a3edec03a197d5a0$var$isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if ($a3edec03a197d5a0$var$isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
    }
    if ($a3edec03a197d5a0$var$isNumber(value)) return ctx.stylize('' + value, 'number');
    if ($a3edec03a197d5a0$var$isBoolean(value)) return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if ($a3edec03a197d5a0$var$isNull(value)) return ctx.stylize('null', 'null');
}
function $a3edec03a197d5a0$var$formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
}
function $a3edec03a197d5a0$var$formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if ($a3edec03a197d5a0$var$hasOwnProperty(value, String(i))) output.push($a3edec03a197d5a0$var$formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push('');
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push($a3edec03a197d5a0$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function $a3edec03a197d5a0$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize('[Getter/Setter]', 'special');
        else str = ctx.stylize('[Getter]', 'special');
    } else if (desc.set) str = ctx.stylize('[Setter]', 'special');
    if (!$a3edec03a197d5a0$var$hasOwnProperty(visibleKeys, key)) name = '[' + key + ']';
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if ($a3edec03a197d5a0$var$isNull(recurseTimes)) str = $a3edec03a197d5a0$var$formatValue(ctx, desc.value, null);
            else str = $a3edec03a197d5a0$var$formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf('\n') > -1) {
                if (array) str = str.split('\n').map(function(line) {
                    return '  ' + line;
                }).join('\n').substr(2);
                else str = '\n' + str.split('\n').map(function(line) {
                    return '   ' + line;
                }).join('\n');
            }
        } else str = ctx.stylize('[Circular]', 'special');
    }
    if ($a3edec03a197d5a0$var$isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, 'name');
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, 'string');
        }
    }
    return name + ': ' + str;
}
function $a3edec03a197d5a0$var$reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
module.exports.types = (parcelRequire("j1Bwk"));
function $a3edec03a197d5a0$var$isArray(ar) {
    return Array.isArray(ar);
}
module.exports.isArray = $a3edec03a197d5a0$var$isArray;
function $a3edec03a197d5a0$var$isBoolean(arg) {
    return typeof arg === 'boolean';
}
module.exports.isBoolean = $a3edec03a197d5a0$var$isBoolean;
function $a3edec03a197d5a0$var$isNull(arg) {
    return arg === null;
}
module.exports.isNull = $a3edec03a197d5a0$var$isNull;
function $a3edec03a197d5a0$var$isNullOrUndefined(arg) {
    return arg == null;
}
module.exports.isNullOrUndefined = $a3edec03a197d5a0$var$isNullOrUndefined;
function $a3edec03a197d5a0$var$isNumber(arg) {
    return typeof arg === 'number';
}
module.exports.isNumber = $a3edec03a197d5a0$var$isNumber;
function $a3edec03a197d5a0$var$isString(arg) {
    return typeof arg === 'string';
}
module.exports.isString = $a3edec03a197d5a0$var$isString;
function $a3edec03a197d5a0$var$isSymbol(arg) {
    return typeof arg === 'symbol';
}
module.exports.isSymbol = $a3edec03a197d5a0$var$isSymbol;
function $a3edec03a197d5a0$var$isUndefined(arg) {
    return arg === void 0;
}
module.exports.isUndefined = $a3edec03a197d5a0$var$isUndefined;
function $a3edec03a197d5a0$var$isRegExp(re) {
    return $a3edec03a197d5a0$var$isObject(re) && $a3edec03a197d5a0$var$objectToString(re) === '[object RegExp]';
}
module.exports.isRegExp = $a3edec03a197d5a0$var$isRegExp;
module.exports.types.isRegExp = $a3edec03a197d5a0$var$isRegExp;
function $a3edec03a197d5a0$var$isObject(arg) {
    return typeof arg === 'object' && arg !== null;
}
module.exports.isObject = $a3edec03a197d5a0$var$isObject;
function $a3edec03a197d5a0$var$isDate(d) {
    return $a3edec03a197d5a0$var$isObject(d) && $a3edec03a197d5a0$var$objectToString(d) === '[object Date]';
}
module.exports.isDate = $a3edec03a197d5a0$var$isDate;
module.exports.types.isDate = $a3edec03a197d5a0$var$isDate;
function $a3edec03a197d5a0$var$isError(e) {
    return $a3edec03a197d5a0$var$isObject(e) && ($a3edec03a197d5a0$var$objectToString(e) === '[object Error]' || e instanceof Error);
}
module.exports.isError = $a3edec03a197d5a0$var$isError;
module.exports.types.isNativeError = $a3edec03a197d5a0$var$isError;
function $a3edec03a197d5a0$var$isFunction(arg) {
    return typeof arg === 'function';
}
module.exports.isFunction = $a3edec03a197d5a0$var$isFunction;
function $a3edec03a197d5a0$var$isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
}
module.exports.isPrimitive = $a3edec03a197d5a0$var$isPrimitive;

module.exports.isBuffer = (parcelRequire("5YED3"));
function $a3edec03a197d5a0$var$objectToString(o) {
    return Object.prototype.toString.call(o);
}
function $a3edec03a197d5a0$var$pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
}
var $a3edec03a197d5a0$var$months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec'
];
// 26 Feb 16:19:34
function $a3edec03a197d5a0$var$timestamp() {
    var d = new Date();
    var time = [
        $a3edec03a197d5a0$var$pad(d.getHours()),
        $a3edec03a197d5a0$var$pad(d.getMinutes()),
        $a3edec03a197d5a0$var$pad(d.getSeconds())
    ].join(':');
    return [
        d.getDate(),
        $a3edec03a197d5a0$var$months[d.getMonth()],
        time
    ].join(' ');
}
// log is just a thin wrapper to console.log that prepends a timestamp
module.exports.log = function() {
    console.log('%s - %s', $a3edec03a197d5a0$var$timestamp(), module.exports.format.apply(module.exports, arguments));
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ module.exports.inherits = (parcelRequire("bGPXt"));
module.exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !$a3edec03a197d5a0$var$isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function $a3edec03a197d5a0$var$hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var $a3edec03a197d5a0$var$kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
module.exports.promisify = function promisify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    if ($a3edec03a197d5a0$var$kCustomPromisifiedSymbol && original[$a3edec03a197d5a0$var$kCustomPromisifiedSymbol]) {
        var fn = original[$a3edec03a197d5a0$var$kCustomPromisifiedSymbol];
        if (typeof fn !== 'function') throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, $a3edec03a197d5a0$var$kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if ($a3edec03a197d5a0$var$kCustomPromisifiedSymbol) Object.defineProperty(fn, $a3edec03a197d5a0$var$kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, $a3edec03a197d5a0$var$getOwnPropertyDescriptors(original));
};
module.exports.promisify.custom = $a3edec03a197d5a0$var$kCustomPromisifiedSymbol;
function $a3edec03a197d5a0$var$callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error('Promise was rejected with a falsy value');
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function $a3edec03a197d5a0$var$callbackify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== 'function') throw new TypeError('The last argument must be of type Function');
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            $4DZrq.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            $4DZrq.nextTick($a3edec03a197d5a0$var$callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, $a3edec03a197d5a0$var$getOwnPropertyDescriptors(original));
    return callbackified;
}
module.exports.callbackify = $a3edec03a197d5a0$var$callbackify;

});
parcelRequire.register("j1Bwk", function(module, exports) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
'use strict';

var $2ayqF = parcelRequire("2ayqF");

var $6GvrU = parcelRequire("6GvrU");

var $fk5Ox = parcelRequire("fk5Ox");

var $f9fcV = parcelRequire("f9fcV");
function $dd9b3718f74fc953$var$uncurryThis(f) {
    return f.call.bind(f);
}
var $dd9b3718f74fc953$var$BigIntSupported = typeof BigInt !== 'undefined';
var $dd9b3718f74fc953$var$SymbolSupported = typeof Symbol !== 'undefined';
var $dd9b3718f74fc953$var$ObjectToString = $dd9b3718f74fc953$var$uncurryThis(Object.prototype.toString);
var $dd9b3718f74fc953$var$numberValue = $dd9b3718f74fc953$var$uncurryThis(Number.prototype.valueOf);
var $dd9b3718f74fc953$var$stringValue = $dd9b3718f74fc953$var$uncurryThis(String.prototype.valueOf);
var $dd9b3718f74fc953$var$booleanValue = $dd9b3718f74fc953$var$uncurryThis(Boolean.prototype.valueOf);
if ($dd9b3718f74fc953$var$BigIntSupported) var $dd9b3718f74fc953$var$bigIntValue = $dd9b3718f74fc953$var$uncurryThis(BigInt.prototype.valueOf);
if ($dd9b3718f74fc953$var$SymbolSupported) var $dd9b3718f74fc953$var$symbolValue = $dd9b3718f74fc953$var$uncurryThis(Symbol.prototype.valueOf);
function $dd9b3718f74fc953$var$checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== 'object') return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
module.exports.isArgumentsObject = $2ayqF;
module.exports.isGeneratorFunction = $6GvrU;
module.exports.isTypedArray = $f9fcV;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function $dd9b3718f74fc953$var$isPromise(input) {
    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
}
module.exports.isPromise = $dd9b3718f74fc953$var$isPromise;
function $dd9b3718f74fc953$var$isArrayBufferView(value) {
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return $f9fcV(value) || $dd9b3718f74fc953$var$isDataView(value);
}
module.exports.isArrayBufferView = $dd9b3718f74fc953$var$isArrayBufferView;
function $dd9b3718f74fc953$var$isUint8Array(value) {
    return $fk5Ox(value) === 'Uint8Array';
}
module.exports.isUint8Array = $dd9b3718f74fc953$var$isUint8Array;
function $dd9b3718f74fc953$var$isUint8ClampedArray(value) {
    return $fk5Ox(value) === 'Uint8ClampedArray';
}
module.exports.isUint8ClampedArray = $dd9b3718f74fc953$var$isUint8ClampedArray;
function $dd9b3718f74fc953$var$isUint16Array(value) {
    return $fk5Ox(value) === 'Uint16Array';
}
module.exports.isUint16Array = $dd9b3718f74fc953$var$isUint16Array;
function $dd9b3718f74fc953$var$isUint32Array(value) {
    return $fk5Ox(value) === 'Uint32Array';
}
module.exports.isUint32Array = $dd9b3718f74fc953$var$isUint32Array;
function $dd9b3718f74fc953$var$isInt8Array(value) {
    return $fk5Ox(value) === 'Int8Array';
}
module.exports.isInt8Array = $dd9b3718f74fc953$var$isInt8Array;
function $dd9b3718f74fc953$var$isInt16Array(value) {
    return $fk5Ox(value) === 'Int16Array';
}
module.exports.isInt16Array = $dd9b3718f74fc953$var$isInt16Array;
function $dd9b3718f74fc953$var$isInt32Array(value) {
    return $fk5Ox(value) === 'Int32Array';
}
module.exports.isInt32Array = $dd9b3718f74fc953$var$isInt32Array;
function $dd9b3718f74fc953$var$isFloat32Array(value) {
    return $fk5Ox(value) === 'Float32Array';
}
module.exports.isFloat32Array = $dd9b3718f74fc953$var$isFloat32Array;
function $dd9b3718f74fc953$var$isFloat64Array(value) {
    return $fk5Ox(value) === 'Float64Array';
}
module.exports.isFloat64Array = $dd9b3718f74fc953$var$isFloat64Array;
function $dd9b3718f74fc953$var$isBigInt64Array(value) {
    return $fk5Ox(value) === 'BigInt64Array';
}
module.exports.isBigInt64Array = $dd9b3718f74fc953$var$isBigInt64Array;
function $dd9b3718f74fc953$var$isBigUint64Array(value) {
    return $fk5Ox(value) === 'BigUint64Array';
}
module.exports.isBigUint64Array = $dd9b3718f74fc953$var$isBigUint64Array;
function $dd9b3718f74fc953$var$isMapToString(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object Map]';
}
$dd9b3718f74fc953$var$isMapToString.working = typeof Map !== 'undefined' && $dd9b3718f74fc953$var$isMapToString(new Map());
function $dd9b3718f74fc953$var$isMap(value) {
    if (typeof Map === 'undefined') return false;
    return $dd9b3718f74fc953$var$isMapToString.working ? $dd9b3718f74fc953$var$isMapToString(value) : value instanceof Map;
}
module.exports.isMap = $dd9b3718f74fc953$var$isMap;
function $dd9b3718f74fc953$var$isSetToString(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object Set]';
}
$dd9b3718f74fc953$var$isSetToString.working = typeof Set !== 'undefined' && $dd9b3718f74fc953$var$isSetToString(new Set());
function $dd9b3718f74fc953$var$isSet(value) {
    if (typeof Set === 'undefined') return false;
    return $dd9b3718f74fc953$var$isSetToString.working ? $dd9b3718f74fc953$var$isSetToString(value) : value instanceof Set;
}
module.exports.isSet = $dd9b3718f74fc953$var$isSet;
function $dd9b3718f74fc953$var$isWeakMapToString(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object WeakMap]';
}
$dd9b3718f74fc953$var$isWeakMapToString.working = typeof WeakMap !== 'undefined' && $dd9b3718f74fc953$var$isWeakMapToString(new WeakMap());
function $dd9b3718f74fc953$var$isWeakMap(value) {
    if (typeof WeakMap === 'undefined') return false;
    return $dd9b3718f74fc953$var$isWeakMapToString.working ? $dd9b3718f74fc953$var$isWeakMapToString(value) : value instanceof WeakMap;
}
module.exports.isWeakMap = $dd9b3718f74fc953$var$isWeakMap;
function $dd9b3718f74fc953$var$isWeakSetToString(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object WeakSet]';
}
$dd9b3718f74fc953$var$isWeakSetToString.working = typeof WeakSet !== 'undefined' && $dd9b3718f74fc953$var$isWeakSetToString(new WeakSet());
function $dd9b3718f74fc953$var$isWeakSet(value) {
    return $dd9b3718f74fc953$var$isWeakSetToString(value);
}
module.exports.isWeakSet = $dd9b3718f74fc953$var$isWeakSet;
function $dd9b3718f74fc953$var$isArrayBufferToString(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object ArrayBuffer]';
}
$dd9b3718f74fc953$var$isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && $dd9b3718f74fc953$var$isArrayBufferToString(new ArrayBuffer());
function $dd9b3718f74fc953$var$isArrayBuffer(value) {
    if (typeof ArrayBuffer === 'undefined') return false;
    return $dd9b3718f74fc953$var$isArrayBufferToString.working ? $dd9b3718f74fc953$var$isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
module.exports.isArrayBuffer = $dd9b3718f74fc953$var$isArrayBuffer;
function $dd9b3718f74fc953$var$isDataViewToString(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object DataView]';
}
$dd9b3718f74fc953$var$isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && $dd9b3718f74fc953$var$isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function $dd9b3718f74fc953$var$isDataView(value) {
    if (typeof DataView === 'undefined') return false;
    return $dd9b3718f74fc953$var$isDataViewToString.working ? $dd9b3718f74fc953$var$isDataViewToString(value) : value instanceof DataView;
}
module.exports.isDataView = $dd9b3718f74fc953$var$isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var $dd9b3718f74fc953$var$SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function $dd9b3718f74fc953$var$isSharedArrayBufferToString(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object SharedArrayBuffer]';
}
function $dd9b3718f74fc953$var$isSharedArrayBuffer(value) {
    if (typeof $dd9b3718f74fc953$var$SharedArrayBufferCopy === 'undefined') return false;
    if (typeof $dd9b3718f74fc953$var$isSharedArrayBufferToString.working === 'undefined') $dd9b3718f74fc953$var$isSharedArrayBufferToString.working = $dd9b3718f74fc953$var$isSharedArrayBufferToString(new $dd9b3718f74fc953$var$SharedArrayBufferCopy());
    return $dd9b3718f74fc953$var$isSharedArrayBufferToString.working ? $dd9b3718f74fc953$var$isSharedArrayBufferToString(value) : value instanceof $dd9b3718f74fc953$var$SharedArrayBufferCopy;
}
module.exports.isSharedArrayBuffer = $dd9b3718f74fc953$var$isSharedArrayBuffer;
function $dd9b3718f74fc953$var$isAsyncFunction(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object AsyncFunction]';
}
module.exports.isAsyncFunction = $dd9b3718f74fc953$var$isAsyncFunction;
function $dd9b3718f74fc953$var$isMapIterator(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object Map Iterator]';
}
module.exports.isMapIterator = $dd9b3718f74fc953$var$isMapIterator;
function $dd9b3718f74fc953$var$isSetIterator(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object Set Iterator]';
}
module.exports.isSetIterator = $dd9b3718f74fc953$var$isSetIterator;
function $dd9b3718f74fc953$var$isGeneratorObject(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object Generator]';
}
module.exports.isGeneratorObject = $dd9b3718f74fc953$var$isGeneratorObject;
function $dd9b3718f74fc953$var$isWebAssemblyCompiledModule(value) {
    return $dd9b3718f74fc953$var$ObjectToString(value) === '[object WebAssembly.Module]';
}
module.exports.isWebAssemblyCompiledModule = $dd9b3718f74fc953$var$isWebAssemblyCompiledModule;
function $dd9b3718f74fc953$var$isNumberObject(value) {
    return $dd9b3718f74fc953$var$checkBoxedPrimitive(value, $dd9b3718f74fc953$var$numberValue);
}
module.exports.isNumberObject = $dd9b3718f74fc953$var$isNumberObject;
function $dd9b3718f74fc953$var$isStringObject(value) {
    return $dd9b3718f74fc953$var$checkBoxedPrimitive(value, $dd9b3718f74fc953$var$stringValue);
}
module.exports.isStringObject = $dd9b3718f74fc953$var$isStringObject;
function $dd9b3718f74fc953$var$isBooleanObject(value) {
    return $dd9b3718f74fc953$var$checkBoxedPrimitive(value, $dd9b3718f74fc953$var$booleanValue);
}
module.exports.isBooleanObject = $dd9b3718f74fc953$var$isBooleanObject;
function $dd9b3718f74fc953$var$isBigIntObject(value) {
    return $dd9b3718f74fc953$var$BigIntSupported && $dd9b3718f74fc953$var$checkBoxedPrimitive(value, $dd9b3718f74fc953$var$bigIntValue);
}
module.exports.isBigIntObject = $dd9b3718f74fc953$var$isBigIntObject;
function $dd9b3718f74fc953$var$isSymbolObject(value) {
    return $dd9b3718f74fc953$var$SymbolSupported && $dd9b3718f74fc953$var$checkBoxedPrimitive(value, $dd9b3718f74fc953$var$symbolValue);
}
module.exports.isSymbolObject = $dd9b3718f74fc953$var$isSymbolObject;
function $dd9b3718f74fc953$var$isBoxedPrimitive(value) {
    return $dd9b3718f74fc953$var$isNumberObject(value) || $dd9b3718f74fc953$var$isStringObject(value) || $dd9b3718f74fc953$var$isBooleanObject(value) || $dd9b3718f74fc953$var$isBigIntObject(value) || $dd9b3718f74fc953$var$isSymbolObject(value);
}
module.exports.isBoxedPrimitive = $dd9b3718f74fc953$var$isBoxedPrimitive;
function $dd9b3718f74fc953$var$isAnyArrayBuffer(value) {
    return typeof Uint8Array !== 'undefined' && ($dd9b3718f74fc953$var$isArrayBuffer(value) || $dd9b3718f74fc953$var$isSharedArrayBuffer(value));
}
module.exports.isAnyArrayBuffer = $dd9b3718f74fc953$var$isAnyArrayBuffer;
[
    'isProxy',
    'isExternal',
    'isModuleNamespaceObject'
].forEach(function(method) {
    Object.defineProperty(module.exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + ' is not supported in userland');
        }
    });
});

});
parcelRequire.register("2ayqF", function(module, exports) {
'use strict';

var $194738dbdd442103$var$hasToStringTag = (parcelRequire("d22ra"))();

var $7kKdJ = parcelRequire("7kKdJ");
var $194738dbdd442103$var$$toString = $7kKdJ('Object.prototype.toString');
var $194738dbdd442103$var$isStandardArguments = function isArguments(value) {
    if ($194738dbdd442103$var$hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) return false;
    return $194738dbdd442103$var$$toString(value) === '[object Arguments]';
};
var $194738dbdd442103$var$isLegacyArguments = function isArguments(value) {
    if ($194738dbdd442103$var$isStandardArguments(value)) return true;
    return value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && $194738dbdd442103$var$$toString(value) !== '[object Array]' && $194738dbdd442103$var$$toString(value.callee) === '[object Function]';
};
var $194738dbdd442103$var$supportsStandardArguments = function() {
    return $194738dbdd442103$var$isStandardArguments(arguments);
}();
$194738dbdd442103$var$isStandardArguments.isLegacyArguments = $194738dbdd442103$var$isLegacyArguments; // for tests
module.exports = $194738dbdd442103$var$supportsStandardArguments ? $194738dbdd442103$var$isStandardArguments : $194738dbdd442103$var$isLegacyArguments;

});
parcelRequire.register("d22ra", function(module, exports) {
'use strict';

var $33sXH = parcelRequire("33sXH");
module.exports = function hasToStringTagShams() {
    return $33sXH() && !!Symbol.toStringTag;
};

});
parcelRequire.register("33sXH", function(module, exports) {
'use strict';
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') return false;
    if (typeof Symbol.iterator === 'symbol') return true;
    var obj = {
    };
    var sym = Symbol('test');
    var symObj = Object(sym);
    if (typeof sym === 'string') return false;
    if (Object.prototype.toString.call(sym) !== '[object Symbol]') return false;
    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === 'function') {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

});


parcelRequire.register("7kKdJ", function(module, exports) {
'use strict';

var $eEm7n = parcelRequire("eEm7n");

var $cTP6X = parcelRequire("cTP6X");
var $556e4115f15481b8$var$$indexOf = $cTP6X($eEm7n('String.prototype.indexOf'));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = $eEm7n(name, !!allowMissing);
    if (typeof intrinsic === 'function' && $556e4115f15481b8$var$$indexOf(name, '.prototype.') > -1) return $cTP6X(intrinsic);
    return intrinsic;
};

});
parcelRequire.register("eEm7n", function(module, exports) {
'use strict';
var $aaa5f548b47edce3$var$undefined;
var $aaa5f548b47edce3$var$$SyntaxError = SyntaxError;
var $aaa5f548b47edce3$var$$Function = Function;
var $aaa5f548b47edce3$var$$TypeError = TypeError;
// eslint-disable-next-line consistent-return
var $aaa5f548b47edce3$var$getEvalledConstructor = function(expressionSyntax) {
    try {
        return $aaa5f548b47edce3$var$$Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {
    }
};
var $aaa5f548b47edce3$var$$gOPD = Object.getOwnPropertyDescriptor;
if ($aaa5f548b47edce3$var$$gOPD) try {
    $aaa5f548b47edce3$var$$gOPD({
    }, '');
} catch (e) {
    $aaa5f548b47edce3$var$$gOPD = null; // this is IE 8, which has a broken gOPD
}
var $aaa5f548b47edce3$var$throwTypeError = function() {
    throw new $aaa5f548b47edce3$var$$TypeError();
};
var $aaa5f548b47edce3$var$ThrowTypeError = $aaa5f548b47edce3$var$$gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return $aaa5f548b47edce3$var$throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $aaa5f548b47edce3$var$$gOPD(arguments, 'callee').get;
        } catch (gOPDthrows) {
            return $aaa5f548b47edce3$var$throwTypeError;
        }
    }
}() : $aaa5f548b47edce3$var$throwTypeError;

var $aaa5f548b47edce3$var$hasSymbols = (parcelRequire("2B2ZP"))();
var $aaa5f548b47edce3$var$getProto = Object.getPrototypeOf || function(x) {
    return x.__proto__;
}; // eslint-disable-line no-proto
var $aaa5f548b47edce3$var$needsEval = {
};
var $aaa5f548b47edce3$var$TypedArray = typeof Uint8Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : $aaa5f548b47edce3$var$getProto(Uint8Array);
var $aaa5f548b47edce3$var$INTRINSICS = {
    '%AggregateError%': typeof AggregateError === 'undefined' ? $aaa5f548b47edce3$var$undefined : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? $aaa5f548b47edce3$var$undefined : ArrayBuffer,
    '%ArrayIteratorPrototype%': $aaa5f548b47edce3$var$hasSymbols ? $aaa5f548b47edce3$var$getProto([][Symbol.iterator]()) : $aaa5f548b47edce3$var$undefined,
    '%AsyncFromSyncIteratorPrototype%': $aaa5f548b47edce3$var$undefined,
    '%AsyncFunction%': $aaa5f548b47edce3$var$needsEval,
    '%AsyncGenerator%': $aaa5f548b47edce3$var$needsEval,
    '%AsyncGeneratorFunction%': $aaa5f548b47edce3$var$needsEval,
    '%AsyncIteratorPrototype%': $aaa5f548b47edce3$var$needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? $aaa5f548b47edce3$var$undefined : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? $aaa5f548b47edce3$var$undefined : BigInt,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? $aaa5f548b47edce3$var$undefined : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': Error,
    '%eval%': eval,
    '%EvalError%': EvalError,
    '%Float32Array%': typeof Float32Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? $aaa5f548b47edce3$var$undefined : FinalizationRegistry,
    '%Function%': $aaa5f548b47edce3$var$$Function,
    '%GeneratorFunction%': $aaa5f548b47edce3$var$needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': $aaa5f548b47edce3$var$hasSymbols ? $aaa5f548b47edce3$var$getProto($aaa5f548b47edce3$var$getProto([][Symbol.iterator]())) : $aaa5f548b47edce3$var$undefined,
    '%JSON%': typeof JSON === 'object' ? JSON : $aaa5f548b47edce3$var$undefined,
    '%Map%': typeof Map === 'undefined' ? $aaa5f548b47edce3$var$undefined : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !$aaa5f548b47edce3$var$hasSymbols ? $aaa5f548b47edce3$var$undefined : $aaa5f548b47edce3$var$getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': Object,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? $aaa5f548b47edce3$var$undefined : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? $aaa5f548b47edce3$var$undefined : Proxy,
    '%RangeError%': RangeError,
    '%ReferenceError%': ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? $aaa5f548b47edce3$var$undefined : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? $aaa5f548b47edce3$var$undefined : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !$aaa5f548b47edce3$var$hasSymbols ? $aaa5f548b47edce3$var$undefined : $aaa5f548b47edce3$var$getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? $aaa5f548b47edce3$var$undefined : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': $aaa5f548b47edce3$var$hasSymbols ? $aaa5f548b47edce3$var$getProto(''[Symbol.iterator]()) : $aaa5f548b47edce3$var$undefined,
    '%Symbol%': $aaa5f548b47edce3$var$hasSymbols ? Symbol : $aaa5f548b47edce3$var$undefined,
    '%SyntaxError%': $aaa5f548b47edce3$var$$SyntaxError,
    '%ThrowTypeError%': $aaa5f548b47edce3$var$ThrowTypeError,
    '%TypedArray%': $aaa5f548b47edce3$var$TypedArray,
    '%TypeError%': $aaa5f548b47edce3$var$$TypeError,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? $aaa5f548b47edce3$var$undefined : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? $aaa5f548b47edce3$var$undefined : Uint32Array,
    '%URIError%': URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? $aaa5f548b47edce3$var$undefined : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? $aaa5f548b47edce3$var$undefined : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? $aaa5f548b47edce3$var$undefined : WeakSet
};
var $aaa5f548b47edce3$var$doEval = function doEval(name) {
    var value;
    if (name === '%AsyncFunction%') value = $aaa5f548b47edce3$var$getEvalledConstructor('async function () {}');
    else if (name === '%GeneratorFunction%') value = $aaa5f548b47edce3$var$getEvalledConstructor('function* () {}');
    else if (name === '%AsyncGeneratorFunction%') value = $aaa5f548b47edce3$var$getEvalledConstructor('async function* () {}');
    else if (name === '%AsyncGenerator%') {
        var fn = doEval('%AsyncGeneratorFunction%');
        if (fn) value = fn.prototype;
    } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval('%AsyncGenerator%');
        if (gen) value = $aaa5f548b47edce3$var$getProto(gen.prototype);
    }
    $aaa5f548b47edce3$var$INTRINSICS[name] = value;
    return value;
};
var $aaa5f548b47edce3$var$LEGACY_ALIASES = {
    '%ArrayBufferPrototype%': [
        'ArrayBuffer',
        'prototype'
    ],
    '%ArrayPrototype%': [
        'Array',
        'prototype'
    ],
    '%ArrayProto_entries%': [
        'Array',
        'prototype',
        'entries'
    ],
    '%ArrayProto_forEach%': [
        'Array',
        'prototype',
        'forEach'
    ],
    '%ArrayProto_keys%': [
        'Array',
        'prototype',
        'keys'
    ],
    '%ArrayProto_values%': [
        'Array',
        'prototype',
        'values'
    ],
    '%AsyncFunctionPrototype%': [
        'AsyncFunction',
        'prototype'
    ],
    '%AsyncGenerator%': [
        'AsyncGeneratorFunction',
        'prototype'
    ],
    '%AsyncGeneratorPrototype%': [
        'AsyncGeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%BooleanPrototype%': [
        'Boolean',
        'prototype'
    ],
    '%DataViewPrototype%': [
        'DataView',
        'prototype'
    ],
    '%DatePrototype%': [
        'Date',
        'prototype'
    ],
    '%ErrorPrototype%': [
        'Error',
        'prototype'
    ],
    '%EvalErrorPrototype%': [
        'EvalError',
        'prototype'
    ],
    '%Float32ArrayPrototype%': [
        'Float32Array',
        'prototype'
    ],
    '%Float64ArrayPrototype%': [
        'Float64Array',
        'prototype'
    ],
    '%FunctionPrototype%': [
        'Function',
        'prototype'
    ],
    '%Generator%': [
        'GeneratorFunction',
        'prototype'
    ],
    '%GeneratorPrototype%': [
        'GeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%Int8ArrayPrototype%': [
        'Int8Array',
        'prototype'
    ],
    '%Int16ArrayPrototype%': [
        'Int16Array',
        'prototype'
    ],
    '%Int32ArrayPrototype%': [
        'Int32Array',
        'prototype'
    ],
    '%JSONParse%': [
        'JSON',
        'parse'
    ],
    '%JSONStringify%': [
        'JSON',
        'stringify'
    ],
    '%MapPrototype%': [
        'Map',
        'prototype'
    ],
    '%NumberPrototype%': [
        'Number',
        'prototype'
    ],
    '%ObjectPrototype%': [
        'Object',
        'prototype'
    ],
    '%ObjProto_toString%': [
        'Object',
        'prototype',
        'toString'
    ],
    '%ObjProto_valueOf%': [
        'Object',
        'prototype',
        'valueOf'
    ],
    '%PromisePrototype%': [
        'Promise',
        'prototype'
    ],
    '%PromiseProto_then%': [
        'Promise',
        'prototype',
        'then'
    ],
    '%Promise_all%': [
        'Promise',
        'all'
    ],
    '%Promise_reject%': [
        'Promise',
        'reject'
    ],
    '%Promise_resolve%': [
        'Promise',
        'resolve'
    ],
    '%RangeErrorPrototype%': [
        'RangeError',
        'prototype'
    ],
    '%ReferenceErrorPrototype%': [
        'ReferenceError',
        'prototype'
    ],
    '%RegExpPrototype%': [
        'RegExp',
        'prototype'
    ],
    '%SetPrototype%': [
        'Set',
        'prototype'
    ],
    '%SharedArrayBufferPrototype%': [
        'SharedArrayBuffer',
        'prototype'
    ],
    '%StringPrototype%': [
        'String',
        'prototype'
    ],
    '%SymbolPrototype%': [
        'Symbol',
        'prototype'
    ],
    '%SyntaxErrorPrototype%': [
        'SyntaxError',
        'prototype'
    ],
    '%TypedArrayPrototype%': [
        'TypedArray',
        'prototype'
    ],
    '%TypeErrorPrototype%': [
        'TypeError',
        'prototype'
    ],
    '%Uint8ArrayPrototype%': [
        'Uint8Array',
        'prototype'
    ],
    '%Uint8ClampedArrayPrototype%': [
        'Uint8ClampedArray',
        'prototype'
    ],
    '%Uint16ArrayPrototype%': [
        'Uint16Array',
        'prototype'
    ],
    '%Uint32ArrayPrototype%': [
        'Uint32Array',
        'prototype'
    ],
    '%URIErrorPrototype%': [
        'URIError',
        'prototype'
    ],
    '%WeakMapPrototype%': [
        'WeakMap',
        'prototype'
    ],
    '%WeakSetPrototype%': [
        'WeakSet',
        'prototype'
    ]
};

var $1jTkk = parcelRequire("1jTkk");

var $euQ0u = parcelRequire("euQ0u");
var $aaa5f548b47edce3$var$$concat = $1jTkk.call(Function.call, Array.prototype.concat);
var $aaa5f548b47edce3$var$$spliceApply = $1jTkk.call(Function.apply, Array.prototype.splice);
var $aaa5f548b47edce3$var$$replace = $1jTkk.call(Function.call, String.prototype.replace);
var $aaa5f548b47edce3$var$$strSlice = $1jTkk.call(Function.call, String.prototype.slice);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var $aaa5f548b47edce3$var$rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var $aaa5f548b47edce3$var$reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var $aaa5f548b47edce3$var$stringToPath = function stringToPath(string) {
    var first = $aaa5f548b47edce3$var$$strSlice(string, 0, 1);
    var last = $aaa5f548b47edce3$var$$strSlice(string, -1);
    if (first === '%' && last !== '%') throw new $aaa5f548b47edce3$var$$SyntaxError('invalid intrinsic syntax, expected closing `%`');
    else if (last === '%' && first !== '%') throw new $aaa5f548b47edce3$var$$SyntaxError('invalid intrinsic syntax, expected opening `%`');
    var result = [];
    $aaa5f548b47edce3$var$$replace(string, $aaa5f548b47edce3$var$rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $aaa5f548b47edce3$var$$replace(subString, $aaa5f548b47edce3$var$reEscapeChar, '$1') : number || match;
    });
    return result;
};
/* end adaptation */ var $aaa5f548b47edce3$var$getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if ($euQ0u($aaa5f548b47edce3$var$LEGACY_ALIASES, intrinsicName)) {
        alias = $aaa5f548b47edce3$var$LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
    }
    if ($euQ0u($aaa5f548b47edce3$var$INTRINSICS, intrinsicName)) {
        var value = $aaa5f548b47edce3$var$INTRINSICS[intrinsicName];
        if (value === $aaa5f548b47edce3$var$needsEval) value = $aaa5f548b47edce3$var$doEval(intrinsicName);
        if (typeof value === 'undefined' && !allowMissing) throw new $aaa5f548b47edce3$var$$TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $aaa5f548b47edce3$var$$SyntaxError('intrinsic ' + name + ' does not exist!');
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) throw new $aaa5f548b47edce3$var$$TypeError('intrinsic name must be a non-empty string');
    if (arguments.length > 1 && typeof allowMissing !== 'boolean') throw new $aaa5f548b47edce3$var$$TypeError('"allowMissing" argument must be a boolean');
    var parts = $aaa5f548b47edce3$var$stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = $aaa5f548b47edce3$var$getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $aaa5f548b47edce3$var$$spliceApply(parts, $aaa5f548b47edce3$var$$concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $aaa5f548b47edce3$var$$strSlice(part, 0, 1);
        var last = $aaa5f548b47edce3$var$$strSlice(part, -1);
        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) throw new $aaa5f548b47edce3$var$$SyntaxError('property names with quotes must have matching quotes');
        if (part === 'constructor' || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';
        if ($euQ0u($aaa5f548b47edce3$var$INTRINSICS, intrinsicRealName)) value = $aaa5f548b47edce3$var$INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $aaa5f548b47edce3$var$$TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                return void 0;
            }
            if ($aaa5f548b47edce3$var$$gOPD && i + 1 >= parts.length) {
                var desc = $aaa5f548b47edce3$var$$gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = $euQ0u(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) $aaa5f548b47edce3$var$INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

});
parcelRequire.register("2B2ZP", function(module, exports) {
'use strict';
var $1e415c7946097c04$var$origSymbol = typeof Symbol !== 'undefined' && Symbol;

var $33sXH = parcelRequire("33sXH");
module.exports = function hasNativeSymbols() {
    if (typeof $1e415c7946097c04$var$origSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof $1e415c7946097c04$var$origSymbol('foo') !== 'symbol') return false;
    if (typeof Symbol('bar') !== 'symbol') return false;
    return $33sXH();
};

});

parcelRequire.register("1jTkk", function(module, exports) {
'use strict';

var $1RVMq = parcelRequire("1RVMq");
module.exports = Function.prototype.bind || $1RVMq;

});
parcelRequire.register("1RVMq", function(module, exports) {
'use strict';
/* eslint no-invalid-this: 1 */ var $15c78f95d4c47ae1$var$ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var $15c78f95d4c47ae1$var$slice = Array.prototype.slice;
var $15c78f95d4c47ae1$var$toStr = Object.prototype.toString;
var $15c78f95d4c47ae1$var$funcType = '[object Function]';
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || $15c78f95d4c47ae1$var$toStr.call(target) !== $15c78f95d4c47ae1$var$funcType) throw new TypeError($15c78f95d4c47ae1$var$ERROR_MESSAGE + target);
    var args = $15c78f95d4c47ae1$var$slice.call(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, args.concat($15c78f95d4c47ae1$var$slice.call(arguments)));
            if (Object(result) === result) return result;
            return this;
        } else return target.apply(that, args.concat($15c78f95d4c47ae1$var$slice.call(arguments)));
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs.push('$' + i);
    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

});


parcelRequire.register("euQ0u", function(module, exports) {
'use strict';

var $1jTkk = parcelRequire("1jTkk");
module.exports = $1jTkk.call(Function.call, Object.prototype.hasOwnProperty);

});


parcelRequire.register("cTP6X", function(module, exports) {
'use strict';

var $1jTkk = parcelRequire("1jTkk");

var $eEm7n = parcelRequire("eEm7n");
var $964244b6e143371a$var$$apply = $eEm7n('%Function.prototype.apply%');
var $964244b6e143371a$var$$call = $eEm7n('%Function.prototype.call%');
var $964244b6e143371a$var$$reflectApply = $eEm7n('%Reflect.apply%', true) || $1jTkk.call($964244b6e143371a$var$$call, $964244b6e143371a$var$$apply);
var $964244b6e143371a$var$$gOPD = $eEm7n('%Object.getOwnPropertyDescriptor%', true);
var $964244b6e143371a$var$$defineProperty = $eEm7n('%Object.defineProperty%', true);
var $964244b6e143371a$var$$max = $eEm7n('%Math.max%');
if ($964244b6e143371a$var$$defineProperty) try {
    $964244b6e143371a$var$$defineProperty({
    }, 'a', {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $964244b6e143371a$var$$defineProperty = null;
}
module.exports = function callBind(originalFunction) {
    var func = $964244b6e143371a$var$$reflectApply($1jTkk, $964244b6e143371a$var$$call, arguments);
    if ($964244b6e143371a$var$$gOPD && $964244b6e143371a$var$$defineProperty) {
        var desc = $964244b6e143371a$var$$gOPD(func, 'length');
        if (desc.configurable) // original length, plus the receiver, minus any additional arguments (after the receiver)
        $964244b6e143371a$var$$defineProperty(func, 'length', {
            value: 1 + $964244b6e143371a$var$$max(0, originalFunction.length - (arguments.length - 1))
        });
    }
    return func;
};
var $964244b6e143371a$var$applyBind = function applyBind() {
    return $964244b6e143371a$var$$reflectApply($1jTkk, $964244b6e143371a$var$$apply, arguments);
};
if ($964244b6e143371a$var$$defineProperty) $964244b6e143371a$var$$defineProperty(module.exports, 'apply', {
    value: $964244b6e143371a$var$applyBind
});
else module.exports.apply = $964244b6e143371a$var$applyBind;

});



parcelRequire.register("6GvrU", function(module, exports) {
'use strict';
var $4ddf0f735108775e$var$toStr = Object.prototype.toString;
var $4ddf0f735108775e$var$fnToStr = Function.prototype.toString;
var $4ddf0f735108775e$var$isFnRegex = /^\s*(?:function)?\*/;

var $4ddf0f735108775e$var$hasToStringTag = (parcelRequire("d22ra"))();
var $4ddf0f735108775e$var$getProto = Object.getPrototypeOf;
var $4ddf0f735108775e$var$getGeneratorFunc = function() {
    if (!$4ddf0f735108775e$var$hasToStringTag) return false;
    try {
        return Function('return function*() {}')();
    } catch (e) {
    }
};
var $4ddf0f735108775e$var$GeneratorFunction;
module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== 'function') return false;
    if ($4ddf0f735108775e$var$isFnRegex.test($4ddf0f735108775e$var$fnToStr.call(fn))) return true;
    if (!$4ddf0f735108775e$var$hasToStringTag) {
        var str = $4ddf0f735108775e$var$toStr.call(fn);
        return str === '[object GeneratorFunction]';
    }
    if (!$4ddf0f735108775e$var$getProto) return false;
    if (typeof $4ddf0f735108775e$var$GeneratorFunction === 'undefined') {
        var generatorFunc = $4ddf0f735108775e$var$getGeneratorFunc();
        $4ddf0f735108775e$var$GeneratorFunction = generatorFunc ? $4ddf0f735108775e$var$getProto(generatorFunc) : false;
    }
    return $4ddf0f735108775e$var$getProto(fn) === $4ddf0f735108775e$var$GeneratorFunction;
};

});

parcelRequire.register("fk5Ox", function(module, exports) {
'use strict';

var $f30GU = parcelRequire("f30GU");

var $10h4x = parcelRequire("10h4x");

var $7kKdJ = parcelRequire("7kKdJ");
var $b27d3bd13172d9fb$var$$toString = $7kKdJ('Object.prototype.toString');

var $b27d3bd13172d9fb$var$hasToStringTag = (parcelRequire("d22ra"))();
var $b27d3bd13172d9fb$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
var $b27d3bd13172d9fb$var$typedArrays = $10h4x();
var $b27d3bd13172d9fb$var$$slice = $7kKdJ('String.prototype.slice');
var $b27d3bd13172d9fb$var$toStrTags = {
};

var $kwQQ0 = parcelRequire("kwQQ0");
var $b27d3bd13172d9fb$var$getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if ($b27d3bd13172d9fb$var$hasToStringTag && $kwQQ0 && $b27d3bd13172d9fb$var$getPrototypeOf) $f30GU($b27d3bd13172d9fb$var$typedArrays, function(typedArray) {
    if (typeof $b27d3bd13172d9fb$var$g[typedArray] === 'function') {
        var arr = new $b27d3bd13172d9fb$var$g[typedArray]();
        if (Symbol.toStringTag in arr) {
            var proto = $b27d3bd13172d9fb$var$getPrototypeOf(arr);
            var descriptor = $kwQQ0(proto, Symbol.toStringTag);
            if (!descriptor) {
                var superProto = $b27d3bd13172d9fb$var$getPrototypeOf(proto);
                descriptor = $kwQQ0(superProto, Symbol.toStringTag);
            }
            $b27d3bd13172d9fb$var$toStrTags[typedArray] = descriptor.get;
        }
    }
});
var $b27d3bd13172d9fb$var$tryTypedArrays = function tryAllTypedArrays(value) {
    var foundName = false;
    $f30GU($b27d3bd13172d9fb$var$toStrTags, function(getter, typedArray) {
        if (!foundName) try {
            var name = getter.call(value);
            if (name === typedArray) foundName = name;
        } catch (e) {
        }
    });
    return foundName;
};

var $f9fcV = parcelRequire("f9fcV");
module.exports = function whichTypedArray(value) {
    if (!$f9fcV(value)) return false;
    if (!$b27d3bd13172d9fb$var$hasToStringTag || !(Symbol.toStringTag in value)) return $b27d3bd13172d9fb$var$$slice($b27d3bd13172d9fb$var$$toString(value), 8, -1);
    return $b27d3bd13172d9fb$var$tryTypedArrays(value);
};

});
parcelRequire.register("f30GU", function(module, exports) {
var $af47ac129404fcf7$var$hasOwn = Object.prototype.hasOwnProperty;
var $af47ac129404fcf7$var$toString = Object.prototype.toString;
module.exports = function forEach(obj, fn, ctx) {
    if ($af47ac129404fcf7$var$toString.call(fn) !== '[object Function]') throw new TypeError('iterator must be a function');
    var l = obj.length;
    if (l === +l) for(var i = 0; i < l; i++)fn.call(ctx, obj[i], i, obj);
    else {
        for(var k in obj)if ($af47ac129404fcf7$var$hasOwn.call(obj, k)) fn.call(ctx, obj[k], k, obj);
    }
};

});

parcelRequire.register("10h4x", function(module, exports) {
'use strict';
var $0bb308b4b40a1c48$var$possibleNames = [
    'BigInt64Array',
    'BigUint64Array',
    'Float32Array',
    'Float64Array',
    'Int16Array',
    'Int32Array',
    'Int8Array',
    'Uint16Array',
    'Uint32Array',
    'Uint8Array',
    'Uint8ClampedArray'
];
var $0bb308b4b40a1c48$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
module.exports = function availableTypedArrays() {
    var out = [];
    for(var i = 0; i < $0bb308b4b40a1c48$var$possibleNames.length; i++)if (typeof $0bb308b4b40a1c48$var$g[$0bb308b4b40a1c48$var$possibleNames[i]] === 'function') out[out.length] = $0bb308b4b40a1c48$var$possibleNames[i];
    return out;
};

});

parcelRequire.register("kwQQ0", function(module, exports) {
'use strict';

var $eEm7n = parcelRequire("eEm7n");
var $ef1fc84fddbb5617$var$$gOPD = $eEm7n('%Object.getOwnPropertyDescriptor%', true);
if ($ef1fc84fddbb5617$var$$gOPD) try {
    $ef1fc84fddbb5617$var$$gOPD([], 'length');
} catch (e) {
    // IE 8 has a broken gOPD
    $ef1fc84fddbb5617$var$$gOPD = null;
}
module.exports = $ef1fc84fddbb5617$var$$gOPD;

});

parcelRequire.register("f9fcV", function(module, exports) {
'use strict';

var $f30GU = parcelRequire("f30GU");

var $10h4x = parcelRequire("10h4x");

var $7kKdJ = parcelRequire("7kKdJ");
var $b0737e29caee2474$var$$toString = $7kKdJ('Object.prototype.toString');

var $b0737e29caee2474$var$hasToStringTag = (parcelRequire("d22ra"))();
var $b0737e29caee2474$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
var $b0737e29caee2474$var$typedArrays = $10h4x();
var $b0737e29caee2474$var$$indexOf = $7kKdJ('Array.prototype.indexOf', true) || function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
var $b0737e29caee2474$var$$slice = $7kKdJ('String.prototype.slice');
var $b0737e29caee2474$var$toStrTags = {
};

var $kwQQ0 = parcelRequire("kwQQ0");
var $b0737e29caee2474$var$getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if ($b0737e29caee2474$var$hasToStringTag && $kwQQ0 && $b0737e29caee2474$var$getPrototypeOf) $f30GU($b0737e29caee2474$var$typedArrays, function(typedArray) {
    var arr = new $b0737e29caee2474$var$g[typedArray]();
    if (Symbol.toStringTag in arr) {
        var proto = $b0737e29caee2474$var$getPrototypeOf(arr);
        var descriptor = $kwQQ0(proto, Symbol.toStringTag);
        if (!descriptor) {
            var superProto = $b0737e29caee2474$var$getPrototypeOf(proto);
            descriptor = $kwQQ0(superProto, Symbol.toStringTag);
        }
        $b0737e29caee2474$var$toStrTags[typedArray] = descriptor.get;
    }
});
var $b0737e29caee2474$var$tryTypedArrays = function tryAllTypedArrays(value) {
    var anyTrue = false;
    $f30GU($b0737e29caee2474$var$toStrTags, function(getter, typedArray) {
        if (!anyTrue) try {
            anyTrue = getter.call(value) === typedArray;
        } catch (e) {
        }
    });
    return anyTrue;
};
module.exports = function isTypedArray(value) {
    if (!value || typeof value !== 'object') return false;
    if (!$b0737e29caee2474$var$hasToStringTag || !(Symbol.toStringTag in value)) {
        var tag = $b0737e29caee2474$var$$slice($b0737e29caee2474$var$$toString(value), 8, -1);
        return $b0737e29caee2474$var$$indexOf($b0737e29caee2474$var$typedArrays, tag) > -1;
    }
    if (!$kwQQ0) return false;
    return $b0737e29caee2474$var$tryTypedArrays(value);
};

});



parcelRequire.register("5YED3", function(module, exports) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

});



parcelRequire.register("jOpH7", function(module, exports) {

var $e6c69e333e148709$require$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;

var $e4AID = parcelRequire("e4AID");

var $cfMXC = parcelRequire("cfMXC");

var $6sp4e = parcelRequire("6sp4e");
// TODO: clear up specs on returning false from a write and emitting a drain event.
// Does this mean if I return false from a write, I should ignore any write requests between that false return and the drain event?
var $e6c69e333e148709$var$WritableStreamBuffer = module.exports = function(opts) {
    var that = this;
    $cfMXC.Stream.call(this);
    opts = opts || {
    };
    var initialSize = opts.initialSize || $6sp4e.DEFAULT_INITIAL_SIZE;
    var incrementAmount = opts.incrementAmount || $6sp4e.DEFAULT_INCREMENT_AMOUNT;
    var buffer = new $e6c69e333e148709$require$Buffer(initialSize);
    var size = 0;
    this.writable = true;
    this.readable = false;
    this.size = function() {
        return size;
    };
    this.maxSize = function() {
        return buffer.length;
    };
    this.getContents = function(length) {
        if (!size) return false;
        var data = new $e6c69e333e148709$require$Buffer(Math.min(length || size, size));
        buffer.copy(data, 0, 0, data.length);
        if (data.length < size) buffer.copy(buffer, 0, data.length);
        size -= data.length;
        return data;
    };
    this.getContentsAsString = function(encoding, length) {
        if (!size) return false;
        var data = buffer.toString(encoding || "utf8", 0, Math.min(length || size, size));
        var dataLength = $e6c69e333e148709$require$Buffer.byteLength(data);
        if (dataLength < size) buffer.copy(buffer, 0, dataLength);
        size -= dataLength;
        return data;
    };
    var increaseBufferIfNecessary = function(incomingDataSize) {
        if (buffer.length - size < incomingDataSize) {
            var factor = Math.ceil((incomingDataSize - (buffer.length - size)) / incrementAmount);
            var newBuffer = new $e6c69e333e148709$require$Buffer(buffer.length + incrementAmount * factor);
            buffer.copy(newBuffer, 0, 0, size);
            buffer = newBuffer;
        }
    };
    this.write = function(data, encoding, callback) {
        if (!that.writable) return;
        if ($e6c69e333e148709$require$Buffer.isBuffer(data)) {
            increaseBufferIfNecessary(data.length);
            data.copy(buffer, size, 0);
            size += data.length;
        } else {
            data = data + "";
            increaseBufferIfNecessary($e6c69e333e148709$require$Buffer.byteLength(data));
            buffer.write(data, size, encoding || "utf8");
            size += $e6c69e333e148709$require$Buffer.byteLength(data);
        }
        if (typeof callback === "function") callback();
    };
    this.end = function() {
        var args = Array.prototype.slice.apply(arguments);
        if (args.length) that.write.apply(that, args);
        that.emit('finish');
        that.destroy();
    };
    this.destroySoon = this.destroy = function() {
        that.writable = false;
        that.emit("close");
    };
};
$e4AID.inherits($e6c69e333e148709$var$WritableStreamBuffer, $cfMXC.Stream);

});

'use strict';

var $c73ca1cf4fb6d129$require$Buffer = $7aaf889172aa0226$export$a143d493d941bafc;
var $37ba85a3d5ab6ae8$exports = {};

$37ba85a3d5ab6ae8$exports = (parcelRequire("6sp4e"));

$37ba85a3d5ab6ae8$exports.ReadableStreamBuffer = (parcelRequire("3nZwL"));

$37ba85a3d5ab6ae8$exports.WritableStreamBuffer = (parcelRequire("jOpH7"));


var $c73ca1cf4fb6d129$var$debug = false;
function $c73ca1cf4fb6d129$var$Real(value) {
    this.value = value;
}

window.bpListCreator = function(dicts) {
    var buffer = new $37ba85a3d5ab6ae8$exports.WritableStreamBuffer();
    buffer.write($c73ca1cf4fb6d129$require$Buffer.from("bplist00"));
    if ($c73ca1cf4fb6d129$var$debug) console.log('create', (parcelRequire("e4AID")).inspect(dicts, false, 10));
    if (dicts instanceof Array && dicts.length === 1) dicts = dicts[0];
    var entries = $c73ca1cf4fb6d129$var$toEntries(dicts);
    if ($c73ca1cf4fb6d129$var$debug) console.log('entries', entries);
    var idSizeInBytes = $c73ca1cf4fb6d129$var$computeIdSizeInBytes(entries.length);
    var offsets = [];
    var offsetSizeInBytes;
    var offsetTableOffset;
    updateEntryIds();
    entries.forEach(function(entry, entryIdx) {
        offsets[entryIdx] = buffer.size();
        if (!entry) buffer.write(0);
        else write(entry);
    });
    writeOffsetTable();
    writeTrailer();
    function updateEntryIds() {
        var strings = {
        };
        var entryId = 0;
        entries.forEach(function(entry) {
            if (entry.id) {
                return;
            }
            if (entry.type === 'string') {
                if (!entry.bplistOverride && strings.hasOwnProperty(entry.value)) {
                    entry.type = 'stringref';
                    entry.id = strings[entry.value];
                } else {
                    strings[entry.value] = entry.id = entryId++;
                }
            } else {
                entry.id = entryId++;
            }
        });
        entries = entries.filter(function(entry) {
            return entry.type !== 'stringref';
        });
    }
    function writeTrailer() {
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeTrailer');
        }
        // 6 null bytes
        buffer.write($c73ca1cf4fb6d129$require$Buffer.from([
            0,
            0,
            0,
            0,
            0,
            0
        ]));
        // size of an offset
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeTrailer(offsetSizeInBytes):', offsetSizeInBytes);
        }
        writeByte(offsetSizeInBytes);
        // size of a ref
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeTrailer(offsetSizeInBytes):', idSizeInBytes);
        }
        writeByte(idSizeInBytes);
        // number of objects
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeTrailer(number of objects):', entries.length);
        }
        writeLong(entries.length);
        // top object
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeTrailer(top object)');
        }
        writeLong(0);
        // offset table offset
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeTrailer(offset table offset):', offsetTableOffset);
        }
        writeLong(offsetTableOffset);
    }
    function writeOffsetTable() {
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeOffsetTable');
        }
        offsetTableOffset = buffer.size();
        offsetSizeInBytes = $c73ca1cf4fb6d129$var$computeOffsetSizeInBytes(offsetTableOffset);
        offsets.forEach(function(offset) {
            writeBytes(offset, offsetSizeInBytes);
        });
    }
    function write(entry) {
        switch(entry.type){
            case 'dict':
                writeDict(entry);
                break;
            case 'number':
            case 'double':
                writeNumber(entry);
                break;
            case 'UID':
                writeUID(entry);
                break;
            case 'array':
                writeArray(entry);
                break;
            case 'boolean':
                writeBoolean(entry);
                break;
            case 'string':
            case 'string-utf16':
                writeString(entry);
                break;
            case 'date':
                writeDate(entry);
                break;
            case 'data':
                writeData(entry);
                break;
            default:
                throw new Error("unhandled entry type: " + entry.type);
        }
    }
    function writeDate(entry) {
        writeByte(51);
        var date = Date.parse(entry.value) / 1000 - 978307200;
        writeDouble(date);
    }
    function writeDict(entry1) {
        if ($c73ca1cf4fb6d129$var$debug) {
            var keysStr = entry1.entryKeys.map(function(k) {
                return k.id;
            });
            var valsStr = entry1.entryValues.map(function(k) {
                return k.id;
            });
            console.log('0x' + buffer.size().toString(16), 'writeDict', '(id: ' + entry1.id + ')', '(keys: ' + keysStr + ')', '(values: ' + valsStr + ')');
        }
        writeIntHeader(13, entry1.entryKeys.length);
        entry1.entryKeys.forEach(function(entry) {
            writeID(entry.id);
        });
        entry1.entryValues.forEach(function(entry) {
            writeID(entry.id);
        });
    }
    function writeNumber(entry) {
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeNumber', entry.value, ' (type: ' + entry.type + ')', '(id: ' + entry.id + ')');
        }
        if (typeof entry.value === 'bigint') {
            var width = 16;
            var hex = entry.value.toString(width);
            var buf = $c73ca1cf4fb6d129$require$Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');
            writeByte(20);
            buffer.write(buf);
        } else if (entry.type !== 'double' && parseFloat(entry.value).toFixed() == entry.value) {
            if (entry.value < 0) {
                writeByte(19);
                writeBytes(entry.value, 8, true);
            } else if (entry.value <= 255) {
                writeByte(16);
                writeBytes(entry.value, 1);
            } else if (entry.value <= 65535) {
                writeByte(17);
                writeBytes(entry.value, 2);
            } else if (entry.value <= 4294967295) {
                writeByte(18);
                writeBytes(entry.value, 4);
            } else {
                writeByte(19);
                writeBytes(entry.value, 8);
            }
        } else {
            writeByte(35);
            writeDouble(entry.value);
        }
    }
    function writeUID(entry) {
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeUID', entry.value, ' (type: ' + entry.type + ')', '(id: ' + entry.id + ')');
        }
        writeIntHeader(8, 0);
        writeID(entry.value);
    }
    function writeArray(entry) {
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeArray (length: ' + entry.entries.length + ')', '(id: ' + entry.id + ')');
        }
        writeIntHeader(10, entry.entries.length);
        entry.entries.forEach(function(e) {
            writeID(e.id);
        });
    }
    function writeBoolean(entry) {
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeBoolean', entry.value, '(id: ' + entry.id + ')');
        }
        writeByte(entry.value ? 9 : 8);
    }
    function writeString(entry) {
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeString', entry.value, '(id: ' + entry.id + ')');
        }
        if (entry.type === 'string-utf16' || mustBeUtf16(entry.value)) {
            var utf16 = $c73ca1cf4fb6d129$require$Buffer.from(entry.value, 'ucs2');
            writeIntHeader(6, utf16.length / 2);
            // needs to be big endian so swap the bytes
            for(var i = 0; i < utf16.length; i += 2){
                var t = utf16[i + 0];
                utf16[i + 0] = utf16[i + 1];
                utf16[i + 1] = t;
            }
            buffer.write(utf16);
        } else {
            var utf8 = $c73ca1cf4fb6d129$require$Buffer.from(entry.value, 'ascii');
            writeIntHeader(5, utf8.length);
            buffer.write(utf8);
        }
    }
    function writeData(entry) {
        if ($c73ca1cf4fb6d129$var$debug) {
            console.log('0x' + buffer.size().toString(16), 'writeData', entry.value, '(id: ' + entry.id + ')');
        }
        writeIntHeader(4, entry.value.length);
        buffer.write(entry.value);
    }
    function writeLong(l) {
        writeBytes(l, 8);
    }
    function writeByte(b) {
        buffer.write($c73ca1cf4fb6d129$require$Buffer.from([
            b
        ]));
    }
    function writeDouble(v) {
        var buf = $c73ca1cf4fb6d129$require$Buffer.alloc(8);
        buf.writeDoubleBE(v, 0);
        buffer.write(buf);
    }
    function writeIntHeader(kind, value) {
        if (value < 15) {
            writeByte((kind << 4) + value);
        } else if (value < 256) {
            writeByte((kind << 4) + 15);
            writeByte(16);
            writeBytes(value, 1);
        } else if (value < 65536) {
            writeByte((kind << 4) + 15);
            writeByte(17);
            writeBytes(value, 2);
        } else {
            writeByte((kind << 4) + 15);
            writeByte(18);
            writeBytes(value, 4);
        }
    }
    function writeID(id) {
        writeBytes(id, idSizeInBytes);
    }
    function writeBytes(value, bytes, is_signedint) {
        // write low-order bytes big-endian style
        var buf = $c73ca1cf4fb6d129$require$Buffer.alloc(bytes);
        var z = 0;
        // javascript doesn't handle large numbers
        while(bytes > 4){
            buf[z++] = is_signedint ? 255 : 0;
            bytes--;
        }
        for(var i = bytes - 1; i >= 0; i--){
            buf[z++] = value >> 8 * i;
        }
        buffer.write(buf);
    }
    function mustBeUtf16(string) {
        return $c73ca1cf4fb6d129$require$Buffer.byteLength(string, 'utf8') != string.length;
    }
    return buffer.getContents();
};
function $c73ca1cf4fb6d129$var$toEntries(dicts) {
    if (dicts.bplistOverride) return [
        dicts
    ];
    if (dicts instanceof Array) return $c73ca1cf4fb6d129$var$toEntriesArray(dicts);
    else if (dicts instanceof $c73ca1cf4fb6d129$require$Buffer) return [
        {
            type: 'data',
            value: dicts
        }
    ];
    else if (dicts instanceof $c73ca1cf4fb6d129$var$Real) return [
        {
            type: 'double',
            value: dicts.value
        }
    ];
    else if (typeof dicts === 'object') {
        if (dicts instanceof Date) return [
            {
                type: 'date',
                value: dicts
            }
        ];
        else if (Object.keys(dicts).length == 1 && typeof dicts.UID === 'number') return [
            {
                type: 'UID',
                value: dicts.UID
            }
        ];
        else return $c73ca1cf4fb6d129$var$toEntriesObject(dicts);
    } else if (typeof dicts === 'string') return [
        {
            type: 'string',
            value: dicts
        }
    ];
    else if (typeof dicts === 'number') return [
        {
            type: 'number',
            value: dicts
        }
    ];
    else if (typeof dicts === 'boolean') return [
        {
            type: 'boolean',
            value: dicts
        }
    ];
    else if (typeof dicts === 'bigint') return [
        {
            type: 'number',
            value: dicts
        }
    ];
    else throw new Error('unhandled entry: ' + dicts);
}
function $c73ca1cf4fb6d129$var$toEntriesArray(arr) {
    if ($c73ca1cf4fb6d129$var$debug) console.log('toEntriesArray');
    var results = [
        {
            type: 'array',
            entries: []
        }
    ];
    arr.forEach(function(v) {
        var entry = $c73ca1cf4fb6d129$var$toEntries(v);
        results[0].entries.push(entry[0]);
        results = results.concat(entry);
    });
    return results;
}
function $c73ca1cf4fb6d129$var$toEntriesObject(dict) {
    if ($c73ca1cf4fb6d129$var$debug) console.log('toEntriesObject');
    var results = [
        {
            type: 'dict',
            entryKeys: [],
            entryValues: []
        }
    ];
    Object.keys(dict).forEach(function(key) {
        var entryKey = $c73ca1cf4fb6d129$var$toEntries(key);
        results[0].entryKeys.push(entryKey[0]);
        results = results.concat(entryKey[0]);
    });
    Object.keys(dict).forEach(function(key) {
        var entryValue = $c73ca1cf4fb6d129$var$toEntries(dict[key]);
        results[0].entryValues.push(entryValue[0]);
        results = results.concat(entryValue);
    });
    return results;
}
function $c73ca1cf4fb6d129$var$computeOffsetSizeInBytes(maxOffset) {
    if (maxOffset < 256) return 1;
    if (maxOffset < 65536) return 2;
    if (maxOffset < 4294967296) return 4;
    return 8;
}
function $c73ca1cf4fb6d129$var$computeIdSizeInBytes(numberOfIds) {
    if (numberOfIds < 256) return 1;
    if (numberOfIds < 65536) return 2;
    return 4;
}
window.bpListCreator.Real = $c73ca1cf4fb6d129$var$Real;


//# sourceMappingURL=index.af739a9e.js.map
